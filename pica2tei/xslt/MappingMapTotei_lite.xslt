<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2014r2

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:agt="http://www.altova.com/Mapforce/agt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:ns0="info:srw/schema/5/picaXML-v1.0" exclude-result-prefixes="agt xs fn ns0">
	<xsl:output method="xml" encoding="UTF-8" byte-order-mark="no" indent="yes"/>
	<xsl:template name="agt:MapTotei_lite_var329_function">
		<xsl:param name="par0" as="node()"/>
		<extent xmlns="http://www.tei-c.org/ns/1.0">
			<xsl:for-each select="((($par0/node())[fn:boolean(self::text())])[fn:exists($par0/@code)])[(fn:string($par0/@code) = 'a')]">
				<xsl:sequence select="fn:string(.)"/>
			</xsl:for-each>
		</extent>
	</xsl:template>
	<xsl:template name="agt:MapTotei_lite_var335_function">
		<xsl:param name="par0" as="node()"/>
		<publicationStmt xmlns="http://www.tei-c.org/ns/1.0">
			<xsl:variable name="var333_resultof_map" as="node()*">
				<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'n')]">
					<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
						<xsl:sequence select="(./@node(), ./node())"/>
					</subfield>
				</xsl:for-each>
			</xsl:variable>
			<xsl:for-each select="($var333_resultof_map/node())[fn:boolean(self::text())]">
				<publisher>
					<xsl:sequence select="fn:string(.)"/>
				</publisher>
			</xsl:for-each>
			<xsl:variable name="var334_resultof_map" as="node()*">
				<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'p')]">
					<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
						<xsl:sequence select="(./@node(), ./node())"/>
					</subfield>
				</xsl:for-each>
			</xsl:variable>
			<xsl:for-each select="($var334_resultof_map/node())[fn:boolean(self::text())]">
				<pubPlace>
					<xsl:sequence select="fn:string(.)"/>
				</pubPlace>
			</xsl:for-each>
		</publicationStmt>
	</xsl:template>
	<xsl:template name="agt:MapTotei_lite_var338_function">
		<xsl:param name="val0" as="node()"/>
		<xsl:param name="par0" as="node()"/>
		<date xmlns="http://www.tei-c.org/ns/1.0" xmlns:dcr="http://www.isocat.org/ns/dcr">
			<xsl:sequence select="fn:concat(fn:concat(fn:string($val0), '-'), fn:string($par0))"/>
		</date>
	</xsl:template>
	<xsl:template name="agt:MapTotei_lite_var344_function">
		<xsl:param name="par0" as="node()"/>
		<xsl:for-each select="((($par0/node())[fn:boolean(self::text())])[fn:exists($par0/@code)])[(fn:string($par0/@code) = 'n')]">
			<date xmlns="http://www.tei-c.org/ns/1.0" xmlns:dcr="http://www.isocat.org/ns/dcr">
				<xsl:sequence select="fn:string(.)"/>
			</date>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="agt:MapTotei_lite_var347_function">
		<xsl:param name="par0" as="node()"/>
		<xsl:variable name="var346_let" as="node()*">
			<xsl:variable name="var342_resultof_map" as="node()*">
				<xsl:for-each select="$par0/ns0:subfield">
					<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
						<xsl:sequence select="(./@node(), ./node())"/>
					</subfield>
				</xsl:for-each>
			</xsl:variable>
			<xsl:variable name="var343_let" as="node()*">
				<xsl:for-each select="$var342_resultof_map[fn:exists(@code)][(fn:string(@code) = 'a')]">
					<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
						<xsl:sequence select="(./@node(), ./node())"/>
					</subfield>
				</xsl:for-each>
			</xsl:variable>
			<xsl:for-each select="($var343_let/node())[fn:boolean(self::text())]">
				<xsl:variable name="var341_current" as="node()" select="."/>
				<xsl:variable name="var339_resultof_map" as="node()*">
					<xsl:for-each select="$par0/ns0:subfield">
						<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
							<xsl:sequence select="(./@node(), ./node())"/>
						</subfield>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var340_let" as="node()*">
					<xsl:for-each select="$var339_resultof_map[fn:exists(@code)][(fn:string(@code) = 'b')]">
						<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
							<xsl:sequence select="(./@node(), ./node())"/>
						</subfield>
					</xsl:for-each>
				</xsl:variable>
				<xsl:for-each select="($var340_let/node())[fn:boolean(self::text())]">
					<xsl:call-template name="agt:MapTotei_lite_var338_function">
						<xsl:with-param name="val0" select="$var341_current" as="node()"/>
						<xsl:with-param name="par0" select="." as="node()"/>
					</xsl:call-template>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:variable name="var345_resultof_map" as="node()*">
				<xsl:for-each select="$par0/ns0:subfield">
					<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
						<xsl:sequence select="(./@node(), ./node())"/>
					</subfield>
				</xsl:for-each>
			</xsl:variable>
			<xsl:for-each select="$var345_resultof_map">
				<xsl:call-template name="agt:MapTotei_lite_var344_function">
					<xsl:with-param name="par0" select="." as="node()"/>
				</xsl:call-template>
			</xsl:for-each>
		</xsl:variable>
		<publicationStmt xmlns="http://www.tei-c.org/ns/1.0">
			<xsl:for-each select="$var346_let">
				<date>
					<xsl:sequence select="fn:string(.)"/>
				</date>
			</xsl:for-each>
		</publicationStmt>
	</xsl:template>
	<xsl:template name="agt:MapTotei_lite_var938_function">
		<xsl:param name="par0" as="node()"/>
		<date xmlns="http://www.tei-c.org/ns/1.0">
			<xsl:if test="fn:exists($par0/@type)">
				<xsl:attribute name="type" namespace="" select="fn:string($par0/@type)"/>
			</xsl:if>
			<xsl:sequence select="fn:string($par0)"/>
		</date>
	</xsl:template>
	<xsl:template name="agt:MapTotei_lite_var942_function">
		<xsl:param name="par0" as="node()"/>
		<date xmlns="http://www.tei-c.org/ns/1.0">
			<xsl:if test="fn:exists($par0/@type)">
				<xsl:attribute name="type" namespace="" select="fn:string($par0/@type)"/>
			</xsl:if>
			<xsl:sequence select="fn:string($par0)"/>
		</date>
	</xsl:template>
	<xsl:template name="agt:MapTotei_lite_var946_function">
		<xsl:param name="par0" as="node()"/>
		<name xmlns="http://www.tei-c.org/ns/1.0">
			<xsl:attribute name="type" namespace="" select="'person'"/>
			<xsl:sequence select="fn:string($par0)"/>
		</name>
	</xsl:template>
	<xsl:template name="agt:MapTotei_lite_var949_function">
		<xsl:param name="val0" as="node()"/>
		<xsl:param name="val1" as="node()"/>
		<xsl:param name="val2" as="node()"/>
		<xsl:param name="par0" as="node()"/>
		<name xmlns="http://www.tei-c.org/ns/1.0" xmlns:dcr="http://www.isocat.org/ns/dcr">
			<xsl:variable name="var948_resultof_map" as="xs:string*">
				<xsl:for-each select="($val0/node())[fn:boolean(self::text())]">
					<xsl:variable name="var947_current" as="node()" select="."/>
					<xsl:for-each select="($val1/node())[fn:boolean(self::text())]">
						<xsl:sequence select="fn:concat(fn:concat(fn:string($var947_current), ', '), fn:string(.))"/>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:sequence select="fn:concat(fn:concat(fn:concat(fn:concat(fn:concat(xs:string(fn:string-join(for $x in $var948_resultof_map return xs:string($x), ' ')), ' '), fn:string($val2)), ' ('), fn:string($par0)), ')')"/>
		</name>
	</xsl:template>
	<xsl:template name="agt:MapTotei_lite_var959_function">
		<xsl:param name="par0" as="node()"/>
		<author xmlns="http://www.tei-c.org/ns/1.0">
			<xsl:for-each select="((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = '0')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var937_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<ref>
					<xsl:sequence select="fn:concat('http://d-nb.info/gnd/', fn:substring-after(xs:string(fn:string-join(for $x in $var937_resultof_map return xs:string($x), ' ')), '/'))"/>
				</ref>
			</xsl:for-each>
			<xsl:variable name="var941_let" as="node()*">
				<xsl:for-each select="((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'h')])[fn:exists(node()[fn:boolean(self::text())])]">
					<date xmlns:dcr="http://www.isocat.org/ns/dcr">
						<xsl:attribute name="type" namespace="" select="'Lebensdaten'"/>
						<xsl:variable name="var939_resultof_map" as="xs:string*">
							<xsl:for-each select="node()[fn:boolean(self::text())]">
								<xsl:sequence select="fn:string(.)"/>
							</xsl:for-each>
						</xsl:variable>
						<xsl:sequence select="xs:string(fn:string-join(for $x in $var939_resultof_map return xs:string($x), ' '))"/>
					</date>
				</xsl:for-each>
				<xsl:for-each select="((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'D')])[fn:exists(node()[fn:boolean(self::text())])]">
					<date xmlns:dcr="http://www.isocat.org/ns/dcr">
						<xsl:attribute name="type" namespace="" select="'Lebensdaten'"/>
						<xsl:variable name="var940_resultof_map" as="xs:string*">
							<xsl:for-each select="node()[fn:boolean(self::text())]">
								<xsl:sequence select="fn:string(.)"/>
							</xsl:for-each>
						</xsl:variable>
						<xsl:sequence select="xs:string(fn:string-join(for $x in $var940_resultof_map return xs:string($x), ' '))"/>
					</date>
				</xsl:for-each>
			</xsl:variable>
			<xsl:for-each select="$var941_let">
				<xsl:call-template name="agt:MapTotei_lite_var938_function">
					<xsl:with-param name="par0" select="." as="node()"/>
				</xsl:call-template>
			</xsl:for-each>
			<xsl:variable name="var945_let" as="node()*">
				<xsl:for-each select="((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'h')])[fn:exists(node()[fn:boolean(self::text())])]">
					<date xmlns:dcr="http://www.isocat.org/ns/dcr">
						<xsl:attribute name="type" namespace="" select="'Lebensdaten'"/>
						<xsl:variable name="var943_resultof_map" as="xs:string*">
							<xsl:for-each select="node()[fn:boolean(self::text())]">
								<xsl:sequence select="fn:string(.)"/>
							</xsl:for-each>
						</xsl:variable>
						<xsl:sequence select="xs:string(fn:string-join(for $x in $var943_resultof_map return xs:string($x), ' '))"/>
					</date>
				</xsl:for-each>
				<xsl:for-each select="((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'D')])[fn:exists(node()[fn:boolean(self::text())])]">
					<date xmlns:dcr="http://www.isocat.org/ns/dcr">
						<xsl:attribute name="type" namespace="" select="'Lebensdaten'"/>
						<xsl:variable name="var944_resultof_map" as="xs:string*">
							<xsl:for-each select="node()[fn:boolean(self::text())]">
								<xsl:sequence select="fn:string(.)"/>
							</xsl:for-each>
						</xsl:variable>
						<xsl:sequence select="xs:string(fn:string-join(for $x in $var944_resultof_map return xs:string($x), ' '))"/>
					</date>
				</xsl:for-each>
			</xsl:variable>
			<xsl:for-each select="$var945_let">
				<xsl:call-template name="agt:MapTotei_lite_var942_function">
					<xsl:with-param name="par0" select="." as="node()"/>
				</xsl:call-template>
			</xsl:for-each>
			<xsl:variable name="var957_resultof_map" as="node()*">
				<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
					<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
						<xsl:sequence select="(./@node(), ./node())"/>
					</subfield>
				</xsl:for-each>
			</xsl:variable>
			<xsl:variable name="var958_let" as="node()*">
				<xsl:for-each select="$var957_resultof_map">
					<xsl:variable name="var956_current" as="node()" select="."/>
					<xsl:variable name="var955_index" as="xs:integer" select="position()"/>
					<xsl:variable name="var954_resultof_map" as="node()*">
						<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]">
							<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
								<xsl:sequence select="(./@node(), ./node())"/>
							</subfield>
						</xsl:for-each>
					</xsl:variable>
					<xsl:for-each select="$var954_resultof_map">
						<xsl:variable name="var953_current" as="node()" select="."/>
						<xsl:if test="(($var955_index = position()) and fn:exists((($var956_current/node())[fn:boolean(self::text())])[fn:exists(($var953_current/node())[fn:boolean(self::text())])]))">
							<xsl:variable name="var952_resultof_map" as="node()*">
								<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'c')]">
									<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
										<xsl:sequence select="(./@node(), ./node())"/>
									</subfield>
								</xsl:for-each>
							</xsl:variable>
							<xsl:for-each select="($var952_resultof_map/node())[fn:boolean(self::text())]">
								<xsl:variable name="var951_current" as="node()" select="."/>
								<xsl:variable name="var950_resultof_map" as="node()*">
									<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'p')]">
										<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</subfield>
									</xsl:for-each>
								</xsl:variable>
								<xsl:for-each select="($var950_resultof_map/node())[fn:boolean(self::text())]">
									<xsl:call-template name="agt:MapTotei_lite_var949_function">
										<xsl:with-param name="val0" select="$var956_current" as="node()"/>
										<xsl:with-param name="val1" select="$var953_current" as="node()"/>
										<xsl:with-param name="val2" select="$var951_current" as="node()"/>
										<xsl:with-param name="par0" select="." as="node()"/>
									</xsl:call-template>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:if>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:for-each select="$var958_let">
				<xsl:call-template name="agt:MapTotei_lite_var946_function">
					<xsl:with-param name="par0" select="." as="node()"/>
				</xsl:call-template>
			</xsl:for-each>
		</author>
	</xsl:template>
	<xsl:template name="agt:MapTotei_lite_var964_function">
		<xsl:param name="val0" as="node()"/>
		<xsl:param name="val1" as="node()"/>
		<xsl:param name="par0" as="node()"/>
		<name xmlns="http://www.tei-c.org/ns/1.0" xmlns:dcr="http://www.isocat.org/ns/dcr">
			<xsl:attribute name="type" namespace="" select="'org'"/>
			<xsl:variable name="var963_resultof_map" as="xs:string*">
				<xsl:for-each select="($val0/node())[fn:boolean(self::text())]">
					<xsl:variable name="var962_current" as="node()" select="."/>
					<xsl:for-each select="($val1/node())[fn:boolean(self::text())]">
						<xsl:sequence select="fn:concat(fn:concat(fn:string($var962_current), '/'), fn:string(.))"/>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:sequence select="fn:concat(fn:concat(fn:concat(xs:string(fn:string-join(for $x in $var963_resultof_map return xs:string($x), ' ')), ' [ '), fn:string($par0)), ']')"/>
		</name>
	</xsl:template>
	<xsl:template name="agt:MapTotei_lite_var972_function">
		<xsl:param name="par0" as="node()"/>
		<xsl:variable name="var970_resultof_map" as="node()*">
			<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
				<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
					<xsl:sequence select="(./@node(), ./node())"/>
				</subfield>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var971_let" as="node()*">
			<xsl:for-each select="$var970_resultof_map">
				<xsl:variable name="var969_current" as="node()" select="."/>
				<xsl:variable name="var968_index" as="xs:integer" select="position()"/>
				<xsl:variable name="var967_resultof_map" as="node()*">
					<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'b')]">
						<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
							<xsl:sequence select="(./@node(), ./node())"/>
						</subfield>
					</xsl:for-each>
				</xsl:variable>
				<xsl:for-each select="$var967_resultof_map">
					<xsl:variable name="var966_current" as="node()" select="."/>
					<xsl:if test="(($var968_index = position()) and fn:exists((($var969_current/node())[fn:boolean(self::text())])[fn:exists(($var966_current/node())[fn:boolean(self::text())])]))">
						<xsl:variable name="var965_resultof_map" as="node()*">
							<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'g')]">
								<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
									<xsl:sequence select="(./@node(), ./node())"/>
								</subfield>
							</xsl:for-each>
						</xsl:variable>
						<xsl:for-each select="($var965_resultof_map/node())[fn:boolean(self::text())]">
							<xsl:call-template name="agt:MapTotei_lite_var964_function">
								<xsl:with-param name="val0" select="$var969_current" as="node()"/>
								<xsl:with-param name="val1" select="$var966_current" as="node()"/>
								<xsl:with-param name="par0" select="." as="node()"/>
							</xsl:call-template>
						</xsl:for-each>
					</xsl:if>
				</xsl:for-each>
			</xsl:for-each>
		</xsl:variable>
		<author xmlns="http://www.tei-c.org/ns/1.0">
			<xsl:for-each select="((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = '0')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var961_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<ref>
					<xsl:sequence select="fn:concat('http://d-nb.info/gnd/', fn:substring-after(xs:string(fn:string-join(for $x in $var961_resultof_map return xs:string($x), ' ')), '/'))"/>
				</ref>
			</xsl:for-each>
			<xsl:for-each select="$var971_let">
				<name>
					<xsl:sequence select="fn:string(.)"/>
				</name>
			</xsl:for-each>
		</author>
	</xsl:template>
	<xsl:template name="agt:MapTotei_lite_var977_function">
		<xsl:param name="val0" as="node()"/>
		<xsl:param name="val1" as="node()"/>
		<xsl:param name="par0" as="node()"/>
		<name xmlns="http://www.tei-c.org/ns/1.0" xmlns:dcr="http://www.isocat.org/ns/dcr">
			<xsl:attribute name="type" namespace="" select="'org'"/>
			<xsl:variable name="var976_resultof_map" as="xs:string*">
				<xsl:for-each select="($val0/node())[fn:boolean(self::text())]">
					<xsl:variable name="var975_current" as="node()" select="."/>
					<xsl:for-each select="($val1/node())[fn:boolean(self::text())]">
						<xsl:sequence select="fn:concat(fn:concat(fn:string($var975_current), '/'), fn:string(.))"/>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:sequence select="fn:concat(fn:concat(fn:concat(xs:string(fn:string-join(for $x in $var976_resultof_map return xs:string($x), ' ')), ' ['), fn:string($par0)), ']')"/>
		</name>
	</xsl:template>
	<xsl:template name="agt:MapTotei_lite_var985_function">
		<xsl:param name="par0" as="node()"/>
		<xsl:variable name="var983_resultof_map" as="node()*">
			<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
				<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
					<xsl:sequence select="(./@node(), ./node())"/>
				</subfield>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var984_let" as="node()*">
			<xsl:for-each select="$var983_resultof_map">
				<xsl:variable name="var982_current" as="node()" select="."/>
				<xsl:variable name="var981_index" as="xs:integer" select="position()"/>
				<xsl:variable name="var980_resultof_map" as="node()*">
					<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'b')]">
						<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
							<xsl:sequence select="(./@node(), ./node())"/>
						</subfield>
					</xsl:for-each>
				</xsl:variable>
				<xsl:for-each select="$var980_resultof_map">
					<xsl:variable name="var979_current" as="node()" select="."/>
					<xsl:if test="(($var981_index = position()) and fn:exists((($var982_current/node())[fn:boolean(self::text())])[fn:exists(($var979_current/node())[fn:boolean(self::text())])]))">
						<xsl:variable name="var978_resultof_map" as="node()*">
							<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'g')]">
								<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
									<xsl:sequence select="(./@node(), ./node())"/>
								</subfield>
							</xsl:for-each>
						</xsl:variable>
						<xsl:for-each select="($var978_resultof_map/node())[fn:boolean(self::text())]">
							<xsl:call-template name="agt:MapTotei_lite_var977_function">
								<xsl:with-param name="val0" select="$var982_current" as="node()"/>
								<xsl:with-param name="val1" select="$var979_current" as="node()"/>
								<xsl:with-param name="par0" select="." as="node()"/>
							</xsl:call-template>
						</xsl:for-each>
					</xsl:if>
				</xsl:for-each>
			</xsl:for-each>
		</xsl:variable>
		<author xmlns="http://www.tei-c.org/ns/1.0">
			<xsl:for-each select="((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = '0')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var974_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<ref>
					<xsl:sequence select="fn:concat('http://d-nb.info/gnd/', fn:substring-after(xs:string(fn:string-join(for $x in $var974_resultof_map return xs:string($x), ' ')), '/'))"/>
				</ref>
			</xsl:for-each>
			<xsl:for-each select="$var984_let">
				<name>
					<xsl:sequence select="fn:string(.)"/>
				</name>
			</xsl:for-each>
		</author>
	</xsl:template>
	<xsl:template name="agt:MapTotei_lite_var999_function">
		<xsl:param name="val0" as="node()"/>
		<xsl:param name="val1" as="node()"/>
		<xsl:param name="val2" as="node()"/>
		<xsl:param name="par0" as="node()"/>
		<name xmlns="http://www.tei-c.org/ns/1.0" xmlns:dcr="http://www.isocat.org/ns/dcr">
			<xsl:attribute name="type" namespace="" select="'person'"/>
			<xsl:variable name="var998_resultof_map" as="xs:string*">
				<xsl:for-each select="($val0/node())[fn:boolean(self::text())]">
					<xsl:variable name="var997_current" as="node()" select="."/>
					<xsl:for-each select="($val1/node())[fn:boolean(self::text())]">
						<xsl:sequence select="fn:concat(fn:concat(fn:string($var997_current), ', '), fn:string(.))"/>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:sequence select="fn:concat(fn:concat(fn:concat(fn:concat(fn:concat(xs:string(fn:string-join(for $x in $var998_resultof_map return xs:string($x), ' ')), ' '), fn:string($val2)), ' ('), fn:string($par0)), ') ')"/>
		</name>
	</xsl:template>
	<xsl:template name="agt:MapTotei_lite_var1008_function">
		<xsl:param name="par0" as="node()"/>
		<xsl:variable name="var1007_resultof_map" as="node()*">
			<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
				<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
					<xsl:sequence select="(./@node(), ./node())"/>
				</subfield>
			</xsl:for-each>
		</xsl:variable>
		<xsl:for-each select="$var1007_resultof_map">
			<xsl:variable name="var1006_current" as="node()" select="."/>
			<xsl:variable name="var1005_index" as="xs:integer" select="position()"/>
			<xsl:variable name="var1004_resultof_map" as="node()*">
				<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]">
					<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
						<xsl:sequence select="(./@node(), ./node())"/>
					</subfield>
				</xsl:for-each>
			</xsl:variable>
			<xsl:for-each select="$var1004_resultof_map">
				<xsl:variable name="var1003_current" as="node()" select="."/>
				<xsl:if test="(($var1005_index = position()) and fn:exists((($var1006_current/node())[fn:boolean(self::text())])[fn:exists(($var1003_current/node())[fn:boolean(self::text())])]))">
					<xsl:variable name="var1002_resultof_map" as="node()*">
						<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'c')]">
							<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
								<xsl:sequence select="(./@node(), ./node())"/>
							</subfield>
						</xsl:for-each>
					</xsl:variable>
					<xsl:for-each select="($var1002_resultof_map/node())[fn:boolean(self::text())]">
						<xsl:variable name="var1001_current" as="node()" select="."/>
						<xsl:variable name="var1000_resultof_map" as="node()*">
							<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'p')]">
								<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
									<xsl:sequence select="(./@node(), ./node())"/>
								</subfield>
							</xsl:for-each>
						</xsl:variable>
						<xsl:for-each select="($var1000_resultof_map/node())[fn:boolean(self::text())]">
							<xsl:call-template name="agt:MapTotei_lite_var999_function">
								<xsl:with-param name="val0" select="$var1006_current" as="node()"/>
								<xsl:with-param name="val1" select="$var1003_current" as="node()"/>
								<xsl:with-param name="val2" select="$var1001_current" as="node()"/>
								<xsl:with-param name="par0" select="." as="node()"/>
							</xsl:call-template>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:if>
			</xsl:for-each>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="agt:MapTotei_lite_var1013_function">
		<xsl:param name="par0" as="node()"/>
		<bibl xmlns="http://www.tei-c.org/ns/1.0">
			<xsl:variable name="var1011_resultof_map" as="node()*">
				<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'n')]">
					<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
						<xsl:sequence select="(./@node(), ./node())"/>
					</subfield>
				</xsl:for-each>
			</xsl:variable>
			<xsl:for-each select="($var1011_resultof_map/node())[fn:boolean(self::text())]">
				<publisher>
					<xsl:sequence select="fn:string(.)"/>
				</publisher>
			</xsl:for-each>
			<xsl:variable name="var1012_resultof_map" as="node()*">
				<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'p')]">
					<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
						<xsl:sequence select="(./@node(), ./node())"/>
					</subfield>
				</xsl:for-each>
			</xsl:variable>
			<xsl:for-each select="($var1012_resultof_map/node())[fn:boolean(self::text())]">
				<pubPlace>
					<xsl:sequence select="fn:string(.)"/>
				</pubPlace>
			</xsl:for-each>
		</bibl>
	</xsl:template>
	<xsl:template name="agt:MapTotei_lite_var1017_function">
		<xsl:param name="par0" as="node()"/>
		<publisher xmlns="http://www.tei-c.org/ns/1.0">
			<xsl:for-each select="((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = '0')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var1015_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<ref>
					<xsl:sequence select="fn:concat('http://d-nb.info/gnd/', fn:substring-after(xs:string(fn:string-join(for $x in $var1015_resultof_map return xs:string($x), ' ')), '/'))"/>
				</ref>
			</xsl:for-each>
			<xsl:variable name="var1016_resultof_map" as="node()*">
				<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
					<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
						<xsl:sequence select="(./@node(), ./node())"/>
					</subfield>
				</xsl:for-each>
			</xsl:variable>
			<xsl:for-each select="($var1016_resultof_map/node())[fn:boolean(self::text())]">
				<name>
					<xsl:sequence select="fn:string(.)"/>
				</name>
			</xsl:for-each>
		</publisher>
	</xsl:template>
	<xsl:template match="/">
		<xsl:variable name="var1_record" as="node()?" select="ns0:record"/>
		<xsl:variable name="var2_resultof_map" as="node()*">
			<xsl:for-each select="$var1_record/ns0:datafield">
				<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
					<xsl:sequence select="(./@node(), ./node())"/>
				</datafield>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var3_resultof_map" as="node()*">
			<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '011@')]">
				<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
					<xsl:sequence select="(./@node(), ./node())"/>
				</datafield>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var4_resultof_map" as="node()*">
			<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '021A')]">
				<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
					<xsl:sequence select="(./@node(), ./node())"/>
				</datafield>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var5_resultof_map" as="node()*">
			<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '021B')]">
				<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
					<xsl:sequence select="(./@node(), ./node())"/>
				</datafield>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var6_resultof_map" as="node()*">
			<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '021M')]">
				<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
					<xsl:sequence select="(./@node(), ./node())"/>
				</datafield>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var7_resultof_map" as="node()*" select="$var3_resultof_map"/>
		<xsl:variable name="var8_val" as="node()*">
			<xsl:for-each select="$var7_resultof_map/ns0:subfield">
				<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
					<xsl:sequence select="(./@node(), ./node())"/>
				</subfield>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var10_resultof_map" as="node()*" select="$var4_resultof_map"/>
		<xsl:variable name="var11_val" as="xs:string*">
			<xsl:for-each select="((($var10_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var9_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:sequence select="xs:string(fn:string-join(for $x in $var9_resultof_map return xs:string($x), ' '))"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var13_resultof_map" as="node()*" select="$var5_resultof_map"/>
		<xsl:variable name="var14_val" as="xs:string*">
			<xsl:for-each select="((($var13_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var12_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:sequence select="xs:string(fn:string-join(for $x in $var12_resultof_map return xs:string($x), ' '))"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var16_resultof_map" as="node()*" select="$var4_resultof_map"/>
		<xsl:variable name="var17_val" as="xs:string*">
			<xsl:for-each select="((($var16_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var15_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:sequence select="xs:string(fn:string-join(for $x in $var15_resultof_map return xs:string($x), ' '))"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var19_resultof_map" as="node()*" select="$var6_resultof_map"/>
		<xsl:variable name="var20_val" as="xs:string*">
			<xsl:for-each select="((($var19_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var18_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:sequence select="xs:string(fn:string-join(for $x in $var18_resultof_map return xs:string($x), ' '))"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var22_resultof_map" as="node()*" select="$var6_resultof_map"/>
		<xsl:variable name="var23_val" as="xs:string*">
			<xsl:for-each select="((($var22_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var21_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:sequence select="xs:string(fn:string-join(for $x in $var21_resultof_map return xs:string($x), ' '))"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var25_resultof_map" as="node()*" select="$var5_resultof_map"/>
		<xsl:variable name="var26_val" as="xs:string*">
			<xsl:for-each select="((($var25_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var24_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:sequence select="xs:string(fn:string-join(for $x in $var24_resultof_map return xs:string($x), ' '))"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var27_resultof_exists" as="xs:boolean" select="fn:exists($var11_val)"/>
		<xsl:variable name="var28_resultof_exists" as="xs:boolean" select="fn:exists($var17_val)"/>
		<xsl:variable name="var29_resultof_exists" as="xs:boolean" select="fn:exists($var23_val)"/>
		<xsl:variable name="var31_resultof_map" as="node()*" select="$var5_resultof_map"/>
		<xsl:variable name="var32_result" as="xs:string*">
			<xsl:for-each select="((($var31_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'f')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var30_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:sequence select="xs:string(fn:string-join(for $x in $var30_resultof_map return xs:string($x), ' '))"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var33_resultof_exists" as="xs:boolean" select="fn:exists($var32_result)"/>
		<xsl:variable name="var35_resultof_map" as="node()*" select="$var6_resultof_map"/>
		<xsl:variable name="var36_result" as="xs:string*">
			<xsl:for-each select="((($var35_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'f')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var34_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:sequence select="xs:string(fn:string-join(for $x in $var34_resultof_map return xs:string($x), ' '))"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var37_resultof_exists" as="xs:boolean" select="fn:exists($var36_result)"/>
		<xsl:variable name="var38_resultof_exists" as="xs:boolean" select="fn:exists($var26_val)"/>
		<xsl:variable name="var40_resultof_map" as="node()*" select="$var4_resultof_map"/>
		<xsl:variable name="var41_result" as="xs:string*">
			<xsl:for-each select="((($var40_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'f')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var39_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:sequence select="xs:string(fn:string-join(for $x in $var39_resultof_map return xs:string($x), ' '))"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var42_resultof_exists" as="xs:boolean" select="fn:exists($var41_result)"/>
		<xsl:variable name="var43_resultof_exists" as="xs:boolean" select="fn:exists($var14_val)"/>
		<xsl:variable name="var44_resultof_exists" as="xs:boolean" select="fn:exists($var20_val)"/>
		<xsl:variable name="var48_resultof_map" as="node()*">
			<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '028C/D')]">
				<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
					<xsl:sequence select="(./@node(), ./node())"/>
				</datafield>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var47_resultof_filter" as="node()*">
			<xsl:for-each select="$var48_resultof_map">
				<xsl:variable name="var45_resultof_map" as="node()*">
					<xsl:for-each select="ns0:subfield[fn:exists(@code)][(fn:string(@code) = 'B')]">
						<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
							<xsl:sequence select="(./@node(), ./node())"/>
						</subfield>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var46_result" as="xs:boolean*">
					<xsl:for-each select="(($var45_resultof_map/node())[fn:boolean(self::text())])[(fn:string(.) = '[Hrsg.]')]">
						<xsl:sequence select="fn:true()"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:if test="fn:exists($var46_result)">
					<xsl:sequence select="."/>
				</xsl:if>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var49_val" as="node()*">
			<xsl:for-each select="$var47_resultof_filter">
				<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
					<xsl:sequence select="(./@node(), ./node())"/>
				</datafield>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var82_val" as="xs:string?">
			<xsl:choose>
				<xsl:when test="$var29_resultof_exists">
					<xsl:variable name="var58_resultof_map" as="node()*" select="$var6_resultof_map"/>
					<xsl:variable name="var59_result" as="xs:string*">
						<xsl:for-each select="((($var58_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
							<xsl:variable name="var57_current" as="node()" select="."/>
							<xsl:variable name="var56_resultof_map" as="node()*" select="$var6_resultof_map"/>
							<xsl:for-each select="((($var56_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
								<xsl:variable name="var50_resultof_map" as="xs:string*">
									<xsl:for-each select="($var57_current/node())[fn:boolean(self::text())]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="var54_result" as="xs:string">
									<xsl:choose>
										<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var50_resultof_map return xs:string($x), ' ')), '@')">
											<xsl:variable name="var51_resultof_map" as="xs:string*">
												<xsl:for-each select="($var57_current/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var52_resultof_map" as="xs:string*">
												<xsl:for-each select="($var57_current/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var51_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var52_resultof_map return xs:string($x), ' ')), '@'))"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="var53_resultof_map" as="xs:string*">
												<xsl:for-each select="($var57_current/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var53_resultof_map return xs:string($x), ' '))"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:variable name="var55_resultof_map" as="xs:string*">
									<xsl:for-each select="node()[fn:boolean(self::text())]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="fn:concat(fn:concat($var54_result, ' / '), xs:string(fn:string-join(for $x in $var55_resultof_map return xs:string($x), ' ')))"/>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:variable>
					<xsl:if test="fn:exists($var59_result)">
						<xsl:variable name="var68_resultof_map" as="node()*" select="$var6_resultof_map"/>
						<xsl:variable name="var69_result" as="xs:string*">
							<xsl:for-each select="((($var68_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
								<xsl:variable name="var67_current" as="node()" select="."/>
								<xsl:variable name="var66_resultof_map" as="node()*" select="$var6_resultof_map"/>
								<xsl:for-each select="((($var66_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
									<xsl:variable name="var60_resultof_map" as="xs:string*">
										<xsl:for-each select="($var67_current/node())[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="var64_result" as="xs:string">
										<xsl:choose>
											<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var60_resultof_map return xs:string($x), ' ')), '@')">
												<xsl:variable name="var61_resultof_map" as="xs:string*">
													<xsl:for-each select="($var67_current/node())[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="var62_resultof_map" as="xs:string*">
													<xsl:for-each select="($var67_current/node())[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var61_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var62_resultof_map return xs:string($x), ' ')), '@'))"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:variable name="var63_resultof_map" as="xs:string*">
													<xsl:for-each select="($var67_current/node())[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var63_resultof_map return xs:string($x), ' '))"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:variable name="var65_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="fn:concat(fn:concat($var64_result, ' / '), xs:string(fn:string-join(for $x in $var65_resultof_map return xs:string($x), ' ')))"/>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:variable>
						<xsl:sequence select="xs:string(fn:string-join(for $x in $var69_result return xs:string($x), ' '))"/>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:variable name="var74_resultof_map" as="node()*" select="$var6_resultof_map"/>
					<xsl:variable name="var75_result" as="xs:string*">
						<xsl:for-each select="((($var74_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
							<xsl:variable name="var70_resultof_map" as="xs:string*">
								<xsl:for-each select="node()[fn:boolean(self::text())]">
									<xsl:sequence select="fn:string(.)"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:choose>
								<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var70_resultof_map return xs:string($x), ' ')), '@')">
									<xsl:variable name="var71_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="var72_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var71_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var72_resultof_map return xs:string($x), ' ')), '@'))"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:variable name="var73_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="xs:string(fn:string-join(for $x in $var73_resultof_map return xs:string($x), ' '))"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:for-each>
					</xsl:variable>
					<xsl:if test="fn:exists($var75_result)">
						<xsl:variable name="var80_resultof_map" as="node()*" select="$var6_resultof_map"/>
						<xsl:variable name="var81_result" as="xs:string*">
							<xsl:for-each select="((($var80_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
								<xsl:variable name="var76_resultof_map" as="xs:string*">
									<xsl:for-each select="node()[fn:boolean(self::text())]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:choose>
									<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var76_resultof_map return xs:string($x), ' ')), '@')">
										<xsl:variable name="var77_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="var78_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var77_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var78_resultof_map return xs:string($x), ' ')), '@'))"/>
									</xsl:when>
									<xsl:otherwise>
										<xsl:variable name="var79_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:sequence select="xs:string(fn:string-join(for $x in $var79_resultof_map return xs:string($x), ' '))"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:for-each>
						</xsl:variable>
						<xsl:sequence select="xs:string(fn:string-join(for $x in $var81_result return xs:string($x), ' '))"/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="var115_val" as="xs:string?">
			<xsl:choose>
				<xsl:when test="$var28_resultof_exists">
					<xsl:variable name="var91_resultof_map" as="node()*" select="$var4_resultof_map"/>
					<xsl:variable name="var92_result" as="xs:string*">
						<xsl:for-each select="((($var91_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
							<xsl:variable name="var90_current" as="node()" select="."/>
							<xsl:variable name="var89_resultof_map" as="node()*" select="$var4_resultof_map"/>
							<xsl:for-each select="((($var89_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
								<xsl:variable name="var83_resultof_map" as="xs:string*">
									<xsl:for-each select="($var90_current/node())[fn:boolean(self::text())]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="var87_result" as="xs:string">
									<xsl:choose>
										<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var83_resultof_map return xs:string($x), ' ')), '@')">
											<xsl:variable name="var84_resultof_map" as="xs:string*">
												<xsl:for-each select="($var90_current/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var85_resultof_map" as="xs:string*">
												<xsl:for-each select="($var90_current/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var84_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var85_resultof_map return xs:string($x), ' ')), '@'))"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="var86_resultof_map" as="xs:string*">
												<xsl:for-each select="($var90_current/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var86_resultof_map return xs:string($x), ' '))"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:variable name="var88_resultof_map" as="xs:string*">
									<xsl:for-each select="node()[fn:boolean(self::text())]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="fn:concat(fn:concat($var87_result, ' / '), xs:string(fn:string-join(for $x in $var88_resultof_map return xs:string($x), ' ')))"/>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:variable>
					<xsl:if test="fn:exists($var92_result)">
						<xsl:variable name="var101_resultof_map" as="node()*" select="$var4_resultof_map"/>
						<xsl:variable name="var102_result" as="xs:string*">
							<xsl:for-each select="((($var101_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
								<xsl:variable name="var100_current" as="node()" select="."/>
								<xsl:variable name="var99_resultof_map" as="node()*" select="$var4_resultof_map"/>
								<xsl:for-each select="((($var99_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
									<xsl:variable name="var93_resultof_map" as="xs:string*">
										<xsl:for-each select="($var100_current/node())[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="var97_result" as="xs:string">
										<xsl:choose>
											<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var93_resultof_map return xs:string($x), ' ')), '@')">
												<xsl:variable name="var94_resultof_map" as="xs:string*">
													<xsl:for-each select="($var100_current/node())[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="var95_resultof_map" as="xs:string*">
													<xsl:for-each select="($var100_current/node())[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var94_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var95_resultof_map return xs:string($x), ' ')), '@'))"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:variable name="var96_resultof_map" as="xs:string*">
													<xsl:for-each select="($var100_current/node())[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var96_resultof_map return xs:string($x), ' '))"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:variable name="var98_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="fn:concat(fn:concat($var97_result, ' / '), xs:string(fn:string-join(for $x in $var98_resultof_map return xs:string($x), ' ')))"/>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:variable>
						<xsl:sequence select="xs:string(fn:string-join(for $x in $var102_result return xs:string($x), ' '))"/>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:variable name="var107_resultof_map" as="node()*" select="$var4_resultof_map"/>
					<xsl:variable name="var108_result" as="xs:string*">
						<xsl:for-each select="((($var107_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
							<xsl:variable name="var103_resultof_map" as="xs:string*">
								<xsl:for-each select="node()[fn:boolean(self::text())]">
									<xsl:sequence select="fn:string(.)"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:choose>
								<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var103_resultof_map return xs:string($x), ' ')), '@')">
									<xsl:variable name="var104_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="var105_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var104_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var105_resultof_map return xs:string($x), ' ')), '@'))"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:variable name="var106_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="xs:string(fn:string-join(for $x in $var106_resultof_map return xs:string($x), ' '))"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:for-each>
					</xsl:variable>
					<xsl:if test="fn:exists($var108_result)">
						<xsl:variable name="var113_resultof_map" as="node()*" select="$var4_resultof_map"/>
						<xsl:variable name="var114_result" as="xs:string*">
							<xsl:for-each select="((($var113_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
								<xsl:variable name="var109_resultof_map" as="xs:string*">
									<xsl:for-each select="node()[fn:boolean(self::text())]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:choose>
									<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var109_resultof_map return xs:string($x), ' ')), '@')">
										<xsl:variable name="var110_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="var111_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var110_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var111_resultof_map return xs:string($x), ' ')), '@'))"/>
									</xsl:when>
									<xsl:otherwise>
										<xsl:variable name="var112_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:sequence select="xs:string(fn:string-join(for $x in $var112_resultof_map return xs:string($x), ' '))"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:for-each>
						</xsl:variable>
						<xsl:sequence select="xs:string(fn:string-join(for $x in $var114_result return xs:string($x), ' '))"/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="var148_val" as="xs:string?">
			<xsl:choose>
				<xsl:when test="$var43_resultof_exists">
					<xsl:variable name="var124_resultof_map" as="node()*" select="$var5_resultof_map"/>
					<xsl:variable name="var125_result" as="xs:string*">
						<xsl:for-each select="((($var124_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
							<xsl:variable name="var123_current" as="node()" select="."/>
							<xsl:variable name="var122_resultof_map" as="node()*" select="$var5_resultof_map"/>
							<xsl:for-each select="((($var122_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
								<xsl:variable name="var116_resultof_map" as="xs:string*">
									<xsl:for-each select="($var123_current/node())[fn:boolean(self::text())]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="var120_result" as="xs:string">
									<xsl:choose>
										<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var116_resultof_map return xs:string($x), ' ')), '@')">
											<xsl:variable name="var117_resultof_map" as="xs:string*">
												<xsl:for-each select="($var123_current/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var118_resultof_map" as="xs:string*">
												<xsl:for-each select="($var123_current/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var117_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var118_resultof_map return xs:string($x), ' ')), '@'))"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="var119_resultof_map" as="xs:string*">
												<xsl:for-each select="($var123_current/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var119_resultof_map return xs:string($x), ' '))"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:variable name="var121_resultof_map" as="xs:string*">
									<xsl:for-each select="node()[fn:boolean(self::text())]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="fn:concat(fn:concat($var120_result, ' / '), xs:string(fn:string-join(for $x in $var121_resultof_map return xs:string($x), ' ')))"/>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:variable>
					<xsl:if test="fn:exists($var125_result)">
						<xsl:variable name="var134_resultof_map" as="node()*" select="$var5_resultof_map"/>
						<xsl:variable name="var135_result" as="xs:string*">
							<xsl:for-each select="((($var134_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
								<xsl:variable name="var133_current" as="node()" select="."/>
								<xsl:variable name="var132_resultof_map" as="node()*" select="$var5_resultof_map"/>
								<xsl:for-each select="((($var132_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
									<xsl:variable name="var126_resultof_map" as="xs:string*">
										<xsl:for-each select="($var133_current/node())[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="var130_result" as="xs:string">
										<xsl:choose>
											<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var126_resultof_map return xs:string($x), ' ')), '@')">
												<xsl:variable name="var127_resultof_map" as="xs:string*">
													<xsl:for-each select="($var133_current/node())[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="var128_resultof_map" as="xs:string*">
													<xsl:for-each select="($var133_current/node())[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var127_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var128_resultof_map return xs:string($x), ' ')), '@'))"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:variable name="var129_resultof_map" as="xs:string*">
													<xsl:for-each select="($var133_current/node())[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var129_resultof_map return xs:string($x), ' '))"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:variable name="var131_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="fn:concat(fn:concat($var130_result, ' / '), xs:string(fn:string-join(for $x in $var131_resultof_map return xs:string($x), ' ')))"/>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:variable>
						<xsl:sequence select="xs:string(fn:string-join(for $x in $var135_result return xs:string($x), ' '))"/>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:variable name="var140_resultof_map" as="node()*" select="$var5_resultof_map"/>
					<xsl:variable name="var141_result" as="xs:string*">
						<xsl:for-each select="((($var140_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
							<xsl:variable name="var136_resultof_map" as="xs:string*">
								<xsl:for-each select="node()[fn:boolean(self::text())]">
									<xsl:sequence select="fn:string(.)"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:choose>
								<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var136_resultof_map return xs:string($x), ' ')), '@')">
									<xsl:variable name="var137_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="var138_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var137_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var138_resultof_map return xs:string($x), ' ')), '@'))"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:variable name="var139_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="xs:string(fn:string-join(for $x in $var139_resultof_map return xs:string($x), ' '))"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:for-each>
					</xsl:variable>
					<xsl:if test="fn:exists($var141_result)">
						<xsl:variable name="var146_resultof_map" as="node()*" select="$var5_resultof_map"/>
						<xsl:variable name="var147_result" as="xs:string*">
							<xsl:for-each select="((($var146_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
								<xsl:variable name="var142_resultof_map" as="xs:string*">
									<xsl:for-each select="node()[fn:boolean(self::text())]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:choose>
									<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var142_resultof_map return xs:string($x), ' ')), '@')">
										<xsl:variable name="var143_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="var144_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var143_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var144_resultof_map return xs:string($x), ' ')), '@'))"/>
									</xsl:when>
									<xsl:otherwise>
										<xsl:variable name="var145_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:sequence select="xs:string(fn:string-join(for $x in $var145_resultof_map return xs:string($x), ' '))"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:for-each>
						</xsl:variable>
						<xsl:sequence select="xs:string(fn:string-join(for $x in $var147_result return xs:string($x), ' '))"/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="var149_resultof_exists" as="xs:boolean" select="fn:exists($var115_val)"/>
		<xsl:variable name="var150_resultof_exists" as="xs:boolean" select="fn:exists($var148_val)"/>
		<xsl:variable name="var151_resultof_exists" as="xs:boolean" select="fn:exists($var82_val)"/>
		<xsl:variable name="var209_val" as="xs:string?">
			<xsl:choose>
				<xsl:when test="$var27_resultof_exists">
					<xsl:variable name="var192_result" as="xs:boolean">
						<xsl:choose>
							<xsl:when test="$var149_resultof_exists">
								<xsl:variable name="var170_resultof_map" as="node()*" select="$var4_resultof_map"/>
								<xsl:variable name="var171_result" as="xs:string*">
									<xsl:for-each select="((($var170_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var168_result" as="xs:string">
											<xsl:choose>
												<xsl:when test="$var28_resultof_exists">
													<xsl:variable name="var160_resultof_map" as="node()*" select="$var4_resultof_map"/>
													<xsl:variable name="var161_result" as="xs:string*">
														<xsl:for-each select="((($var160_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var159_current" as="node()" select="."/>
															<xsl:variable name="var158_resultof_map" as="node()*" select="$var4_resultof_map"/>
															<xsl:for-each select="((($var158_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var152_resultof_map" as="xs:string*">
																	<xsl:for-each select="($var159_current/node())[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:variable name="var156_result" as="xs:string">
																	<xsl:choose>
																		<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var152_resultof_map return xs:string($x), ' ')), '@')">
																			<xsl:variable name="var153_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var159_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:variable name="var154_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var159_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var153_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var154_resultof_map return xs:string($x), ' ')), '@'))"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:variable name="var155_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var159_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var155_resultof_map return xs:string($x), ' '))"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:variable>
																<xsl:variable name="var157_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="fn:concat(fn:concat($var156_result, ' / '), xs:string(fn:string-join(for $x in $var157_resultof_map return xs:string($x), ' ')))"/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var161_result return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="var166_resultof_map" as="node()*" select="$var4_resultof_map"/>
													<xsl:variable name="var167_result" as="xs:string*">
														<xsl:for-each select="((($var166_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var162_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:choose>
																<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var162_resultof_map return xs:string($x), ' ')), '@')">
																	<xsl:variable name="var163_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:variable name="var164_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var163_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var164_resultof_map return xs:string($x), ' ')), '@'))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="var165_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var165_resultof_map return xs:string($x), ' '))"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var167_result return xs:string($x), ' '))"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:variable name="var169_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:sequence select="fn:concat(fn:concat($var168_result, ' : '), xs:string(fn:string-join(for $x in $var169_resultof_map return xs:string($x), ' ')))"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="fn:exists($var171_result)"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="fn:false()"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:if test="$var192_result">
						<xsl:variable name="var191_result" as="xs:string*">
							<xsl:if test="$var149_resultof_exists">
								<xsl:variable name="var190_resultof_map" as="node()*" select="$var4_resultof_map"/>
								<xsl:for-each select="((($var190_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
									<xsl:variable name="var188_result" as="xs:string">
										<xsl:choose>
											<xsl:when test="$var28_resultof_exists">
												<xsl:variable name="var180_resultof_map" as="node()*" select="$var4_resultof_map"/>
												<xsl:variable name="var181_result" as="xs:string*">
													<xsl:for-each select="((($var180_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
														<xsl:variable name="var179_current" as="node()" select="."/>
														<xsl:variable name="var178_resultof_map" as="node()*" select="$var4_resultof_map"/>
														<xsl:for-each select="((($var178_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var172_resultof_map" as="xs:string*">
																<xsl:for-each select="($var179_current/node())[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:variable name="var176_result" as="xs:string">
																<xsl:choose>
																	<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var172_resultof_map return xs:string($x), ' ')), '@')">
																		<xsl:variable name="var173_resultof_map" as="xs:string*">
																			<xsl:for-each select="($var179_current/node())[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:variable name="var174_resultof_map" as="xs:string*">
																			<xsl:for-each select="($var179_current/node())[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var173_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var174_resultof_map return xs:string($x), ' ')), '@'))"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:variable name="var175_resultof_map" as="xs:string*">
																			<xsl:for-each select="($var179_current/node())[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var175_resultof_map return xs:string($x), ' '))"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:variable>
															<xsl:variable name="var177_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="fn:concat(fn:concat($var176_result, ' / '), xs:string(fn:string-join(for $x in $var177_resultof_map return xs:string($x), ' ')))"/>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var181_result return xs:string($x), ' '))"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:variable name="var186_resultof_map" as="node()*" select="$var4_resultof_map"/>
												<xsl:variable name="var187_result" as="xs:string*">
													<xsl:for-each select="((($var186_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
														<xsl:variable name="var182_resultof_map" as="xs:string*">
															<xsl:for-each select="node()[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:choose>
															<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var182_resultof_map return xs:string($x), ' ')), '@')">
																<xsl:variable name="var183_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:variable name="var184_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var183_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var184_resultof_map return xs:string($x), ' ')), '@'))"/>
															</xsl:when>
															<xsl:otherwise>
																<xsl:variable name="var185_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="xs:string(fn:string-join(for $x in $var185_resultof_map return xs:string($x), ' '))"/>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var187_result return xs:string($x), ' '))"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:variable name="var189_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="fn:concat(fn:concat($var188_result, ' : '), xs:string(fn:string-join(for $x in $var189_resultof_map return xs:string($x), ' ')))"/>
								</xsl:for-each>
							</xsl:if>
						</xsl:variable>
						<xsl:sequence select="xs:string(fn:string-join(for $x in $var191_result return xs:string($x), ' '))"/>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="$var149_resultof_exists">
						<xsl:choose>
							<xsl:when test="$var28_resultof_exists">
								<xsl:variable name="var201_resultof_map" as="node()*" select="$var4_resultof_map"/>
								<xsl:variable name="var202_result" as="xs:string*">
									<xsl:for-each select="((($var201_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var200_current" as="node()" select="."/>
										<xsl:variable name="var199_resultof_map" as="node()*" select="$var4_resultof_map"/>
										<xsl:for-each select="((($var199_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
											<xsl:variable name="var193_resultof_map" as="xs:string*">
												<xsl:for-each select="($var200_current/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var197_result" as="xs:string">
												<xsl:choose>
													<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var193_resultof_map return xs:string($x), ' ')), '@')">
														<xsl:variable name="var194_resultof_map" as="xs:string*">
															<xsl:for-each select="($var200_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:variable name="var195_resultof_map" as="xs:string*">
															<xsl:for-each select="($var200_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var194_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var195_resultof_map return xs:string($x), ' ')), '@'))"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:variable name="var196_resultof_map" as="xs:string*">
															<xsl:for-each select="($var200_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var196_resultof_map return xs:string($x), ' '))"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:variable name="var198_resultof_map" as="xs:string*">
												<xsl:for-each select="node()[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="fn:concat(fn:concat($var197_result, ' / '), xs:string(fn:string-join(for $x in $var198_resultof_map return xs:string($x), ' ')))"/>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var202_result return xs:string($x), ' '))"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:variable name="var207_resultof_map" as="node()*" select="$var4_resultof_map"/>
								<xsl:variable name="var208_result" as="xs:string*">
									<xsl:for-each select="((($var207_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var203_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var203_resultof_map return xs:string($x), ' ')), '@')">
												<xsl:variable name="var204_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="var205_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var204_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var205_resultof_map return xs:string($x), ' ')), '@'))"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:variable name="var206_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var206_resultof_map return xs:string($x), ' '))"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var208_result return xs:string($x), ' '))"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="var267_val" as="xs:string?">
			<xsl:choose>
				<xsl:when test="$var44_resultof_exists">
					<xsl:variable name="var250_result" as="xs:boolean">
						<xsl:choose>
							<xsl:when test="$var151_resultof_exists">
								<xsl:variable name="var228_resultof_map" as="node()*" select="$var6_resultof_map"/>
								<xsl:variable name="var229_result" as="xs:string*">
									<xsl:for-each select="((($var228_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var226_result" as="xs:string">
											<xsl:choose>
												<xsl:when test="$var29_resultof_exists">
													<xsl:variable name="var218_resultof_map" as="node()*" select="$var6_resultof_map"/>
													<xsl:variable name="var219_result" as="xs:string*">
														<xsl:for-each select="((($var218_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var217_current" as="node()" select="."/>
															<xsl:variable name="var216_resultof_map" as="node()*" select="$var6_resultof_map"/>
															<xsl:for-each select="((($var216_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var210_resultof_map" as="xs:string*">
																	<xsl:for-each select="($var217_current/node())[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:variable name="var214_result" as="xs:string">
																	<xsl:choose>
																		<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var210_resultof_map return xs:string($x), ' ')), '@')">
																			<xsl:variable name="var211_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var217_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:variable name="var212_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var217_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var211_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var212_resultof_map return xs:string($x), ' ')), '@'))"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:variable name="var213_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var217_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var213_resultof_map return xs:string($x), ' '))"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:variable>
																<xsl:variable name="var215_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="fn:concat(fn:concat($var214_result, ' / '), xs:string(fn:string-join(for $x in $var215_resultof_map return xs:string($x), ' ')))"/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var219_result return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="var224_resultof_map" as="node()*" select="$var6_resultof_map"/>
													<xsl:variable name="var225_result" as="xs:string*">
														<xsl:for-each select="((($var224_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var220_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:choose>
																<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var220_resultof_map return xs:string($x), ' ')), '@')">
																	<xsl:variable name="var221_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:variable name="var222_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var221_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var222_resultof_map return xs:string($x), ' ')), '@'))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="var223_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var223_resultof_map return xs:string($x), ' '))"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var225_result return xs:string($x), ' '))"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:variable name="var227_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:sequence select="fn:concat(fn:concat($var226_result, ' : '), xs:string(fn:string-join(for $x in $var227_resultof_map return xs:string($x), ' ')))"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="fn:exists($var229_result)"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="fn:false()"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:if test="$var250_result">
						<xsl:variable name="var249_result" as="xs:string*">
							<xsl:if test="$var151_resultof_exists">
								<xsl:variable name="var248_resultof_map" as="node()*" select="$var6_resultof_map"/>
								<xsl:for-each select="((($var248_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
									<xsl:variable name="var246_result" as="xs:string">
										<xsl:choose>
											<xsl:when test="$var29_resultof_exists">
												<xsl:variable name="var238_resultof_map" as="node()*" select="$var6_resultof_map"/>
												<xsl:variable name="var239_result" as="xs:string*">
													<xsl:for-each select="((($var238_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
														<xsl:variable name="var237_current" as="node()" select="."/>
														<xsl:variable name="var236_resultof_map" as="node()*" select="$var6_resultof_map"/>
														<xsl:for-each select="((($var236_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var230_resultof_map" as="xs:string*">
																<xsl:for-each select="($var237_current/node())[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:variable name="var234_result" as="xs:string">
																<xsl:choose>
																	<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var230_resultof_map return xs:string($x), ' ')), '@')">
																		<xsl:variable name="var231_resultof_map" as="xs:string*">
																			<xsl:for-each select="($var237_current/node())[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:variable name="var232_resultof_map" as="xs:string*">
																			<xsl:for-each select="($var237_current/node())[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var231_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var232_resultof_map return xs:string($x), ' ')), '@'))"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:variable name="var233_resultof_map" as="xs:string*">
																			<xsl:for-each select="($var237_current/node())[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var233_resultof_map return xs:string($x), ' '))"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:variable>
															<xsl:variable name="var235_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="fn:concat(fn:concat($var234_result, ' / '), xs:string(fn:string-join(for $x in $var235_resultof_map return xs:string($x), ' ')))"/>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var239_result return xs:string($x), ' '))"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:variable name="var244_resultof_map" as="node()*" select="$var6_resultof_map"/>
												<xsl:variable name="var245_result" as="xs:string*">
													<xsl:for-each select="((($var244_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
														<xsl:variable name="var240_resultof_map" as="xs:string*">
															<xsl:for-each select="node()[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:choose>
															<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var240_resultof_map return xs:string($x), ' ')), '@')">
																<xsl:variable name="var241_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:variable name="var242_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var241_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var242_resultof_map return xs:string($x), ' ')), '@'))"/>
															</xsl:when>
															<xsl:otherwise>
																<xsl:variable name="var243_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="xs:string(fn:string-join(for $x in $var243_resultof_map return xs:string($x), ' '))"/>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var245_result return xs:string($x), ' '))"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:variable name="var247_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="fn:concat(fn:concat($var246_result, ' : '), xs:string(fn:string-join(for $x in $var247_resultof_map return xs:string($x), ' ')))"/>
								</xsl:for-each>
							</xsl:if>
						</xsl:variable>
						<xsl:sequence select="xs:string(fn:string-join(for $x in $var249_result return xs:string($x), ' '))"/>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="$var151_resultof_exists">
						<xsl:choose>
							<xsl:when test="$var29_resultof_exists">
								<xsl:variable name="var259_resultof_map" as="node()*" select="$var6_resultof_map"/>
								<xsl:variable name="var260_result" as="xs:string*">
									<xsl:for-each select="((($var259_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var258_current" as="node()" select="."/>
										<xsl:variable name="var257_resultof_map" as="node()*" select="$var6_resultof_map"/>
										<xsl:for-each select="((($var257_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
											<xsl:variable name="var251_resultof_map" as="xs:string*">
												<xsl:for-each select="($var258_current/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var255_result" as="xs:string">
												<xsl:choose>
													<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var251_resultof_map return xs:string($x), ' ')), '@')">
														<xsl:variable name="var252_resultof_map" as="xs:string*">
															<xsl:for-each select="($var258_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:variable name="var253_resultof_map" as="xs:string*">
															<xsl:for-each select="($var258_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var252_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var253_resultof_map return xs:string($x), ' ')), '@'))"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:variable name="var254_resultof_map" as="xs:string*">
															<xsl:for-each select="($var258_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var254_resultof_map return xs:string($x), ' '))"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:variable name="var256_resultof_map" as="xs:string*">
												<xsl:for-each select="node()[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="fn:concat(fn:concat($var255_result, ' / '), xs:string(fn:string-join(for $x in $var256_resultof_map return xs:string($x), ' ')))"/>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var260_result return xs:string($x), ' '))"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:variable name="var265_resultof_map" as="node()*" select="$var6_resultof_map"/>
								<xsl:variable name="var266_result" as="xs:string*">
									<xsl:for-each select="((($var265_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var261_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var261_resultof_map return xs:string($x), ' ')), '@')">
												<xsl:variable name="var262_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="var263_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var262_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var263_resultof_map return xs:string($x), ' ')), '@'))"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:variable name="var264_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var264_resultof_map return xs:string($x), ' '))"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var266_result return xs:string($x), ' '))"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="var325_val" as="xs:string?">
			<xsl:choose>
				<xsl:when test="$var38_resultof_exists">
					<xsl:variable name="var308_result" as="xs:boolean">
						<xsl:choose>
							<xsl:when test="$var150_resultof_exists">
								<xsl:variable name="var286_resultof_map" as="node()*" select="$var5_resultof_map"/>
								<xsl:variable name="var287_result" as="xs:string*">
									<xsl:for-each select="((($var286_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var284_result" as="xs:string">
											<xsl:choose>
												<xsl:when test="$var43_resultof_exists">
													<xsl:variable name="var276_resultof_map" as="node()*" select="$var5_resultof_map"/>
													<xsl:variable name="var277_result" as="xs:string*">
														<xsl:for-each select="((($var276_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var275_current" as="node()" select="."/>
															<xsl:variable name="var274_resultof_map" as="node()*" select="$var5_resultof_map"/>
															<xsl:for-each select="((($var274_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var268_resultof_map" as="xs:string*">
																	<xsl:for-each select="($var275_current/node())[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:variable name="var272_result" as="xs:string">
																	<xsl:choose>
																		<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var268_resultof_map return xs:string($x), ' ')), '@')">
																			<xsl:variable name="var269_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var275_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:variable name="var270_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var275_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var269_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var270_resultof_map return xs:string($x), ' ')), '@'))"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:variable name="var271_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var275_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var271_resultof_map return xs:string($x), ' '))"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:variable>
																<xsl:variable name="var273_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="fn:concat(fn:concat($var272_result, ' / '), xs:string(fn:string-join(for $x in $var273_resultof_map return xs:string($x), ' ')))"/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var277_result return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="var282_resultof_map" as="node()*" select="$var5_resultof_map"/>
													<xsl:variable name="var283_result" as="xs:string*">
														<xsl:for-each select="((($var282_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var278_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:choose>
																<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var278_resultof_map return xs:string($x), ' ')), '@')">
																	<xsl:variable name="var279_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:variable name="var280_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var279_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var280_resultof_map return xs:string($x), ' ')), '@'))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="var281_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var281_resultof_map return xs:string($x), ' '))"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var283_result return xs:string($x), ' '))"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:variable name="var285_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:sequence select="fn:concat(fn:concat($var284_result, ' : '), xs:string(fn:string-join(for $x in $var285_resultof_map return xs:string($x), ' ')))"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="fn:exists($var287_result)"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="fn:false()"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:if test="$var308_result">
						<xsl:variable name="var307_result" as="xs:string*">
							<xsl:if test="$var150_resultof_exists">
								<xsl:variable name="var306_resultof_map" as="node()*" select="$var5_resultof_map"/>
								<xsl:for-each select="((($var306_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
									<xsl:variable name="var304_result" as="xs:string">
										<xsl:choose>
											<xsl:when test="$var43_resultof_exists">
												<xsl:variable name="var296_resultof_map" as="node()*" select="$var5_resultof_map"/>
												<xsl:variable name="var297_result" as="xs:string*">
													<xsl:for-each select="((($var296_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
														<xsl:variable name="var295_current" as="node()" select="."/>
														<xsl:variable name="var294_resultof_map" as="node()*" select="$var5_resultof_map"/>
														<xsl:for-each select="((($var294_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var288_resultof_map" as="xs:string*">
																<xsl:for-each select="($var295_current/node())[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:variable name="var292_result" as="xs:string">
																<xsl:choose>
																	<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var288_resultof_map return xs:string($x), ' ')), '@')">
																		<xsl:variable name="var289_resultof_map" as="xs:string*">
																			<xsl:for-each select="($var295_current/node())[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:variable name="var290_resultof_map" as="xs:string*">
																			<xsl:for-each select="($var295_current/node())[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var289_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var290_resultof_map return xs:string($x), ' ')), '@'))"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:variable name="var291_resultof_map" as="xs:string*">
																			<xsl:for-each select="($var295_current/node())[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var291_resultof_map return xs:string($x), ' '))"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:variable>
															<xsl:variable name="var293_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="fn:concat(fn:concat($var292_result, ' / '), xs:string(fn:string-join(for $x in $var293_resultof_map return xs:string($x), ' ')))"/>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var297_result return xs:string($x), ' '))"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:variable name="var302_resultof_map" as="node()*" select="$var5_resultof_map"/>
												<xsl:variable name="var303_result" as="xs:string*">
													<xsl:for-each select="((($var302_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
														<xsl:variable name="var298_resultof_map" as="xs:string*">
															<xsl:for-each select="node()[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:choose>
															<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var298_resultof_map return xs:string($x), ' ')), '@')">
																<xsl:variable name="var299_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:variable name="var300_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var299_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var300_resultof_map return xs:string($x), ' ')), '@'))"/>
															</xsl:when>
															<xsl:otherwise>
																<xsl:variable name="var301_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="xs:string(fn:string-join(for $x in $var301_resultof_map return xs:string($x), ' '))"/>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var303_result return xs:string($x), ' '))"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:variable name="var305_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="fn:concat(fn:concat($var304_result, ' : '), xs:string(fn:string-join(for $x in $var305_resultof_map return xs:string($x), ' ')))"/>
								</xsl:for-each>
							</xsl:if>
						</xsl:variable>
						<xsl:sequence select="xs:string(fn:string-join(for $x in $var307_result return xs:string($x), ' '))"/>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="$var150_resultof_exists">
						<xsl:choose>
							<xsl:when test="$var43_resultof_exists">
								<xsl:variable name="var317_resultof_map" as="node()*" select="$var5_resultof_map"/>
								<xsl:variable name="var318_result" as="xs:string*">
									<xsl:for-each select="((($var317_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var316_current" as="node()" select="."/>
										<xsl:variable name="var315_resultof_map" as="node()*" select="$var5_resultof_map"/>
										<xsl:for-each select="((($var315_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
											<xsl:variable name="var309_resultof_map" as="xs:string*">
												<xsl:for-each select="($var316_current/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var313_result" as="xs:string">
												<xsl:choose>
													<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var309_resultof_map return xs:string($x), ' ')), '@')">
														<xsl:variable name="var310_resultof_map" as="xs:string*">
															<xsl:for-each select="($var316_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:variable name="var311_resultof_map" as="xs:string*">
															<xsl:for-each select="($var316_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var310_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var311_resultof_map return xs:string($x), ' ')), '@'))"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:variable name="var312_resultof_map" as="xs:string*">
															<xsl:for-each select="($var316_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var312_resultof_map return xs:string($x), ' '))"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:variable name="var314_resultof_map" as="xs:string*">
												<xsl:for-each select="node()[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="fn:concat(fn:concat($var313_result, ' / '), xs:string(fn:string-join(for $x in $var314_resultof_map return xs:string($x), ' ')))"/>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var318_result return xs:string($x), ' '))"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:variable name="var323_resultof_map" as="node()*" select="$var5_resultof_map"/>
								<xsl:variable name="var324_result" as="xs:string*">
									<xsl:for-each select="((($var323_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var319_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var319_resultof_map return xs:string($x), ' ')), '@')">
												<xsl:variable name="var320_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="var321_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var320_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var321_resultof_map return xs:string($x), ' ')), '@'))"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:variable name="var322_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var322_resultof_map return xs:string($x), ' '))"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var324_result return xs:string($x), ' '))"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="var326_resultof_exists" as="xs:boolean" select="fn:exists($var325_val)"/>
		<xsl:variable name="var327_resultof_exists" as="xs:boolean" select="fn:exists($var209_val)"/>
		<xsl:variable name="var328_resultof_exists" as="xs:boolean" select="fn:exists($var267_val)"/>
		<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:dcr="http://www.isocat.org/ns/dcr">
			<xsl:attribute name="xsi:schemaLocation" namespace="http://www.w3.org/2001/XMLSchema-instance" select="'http://www.tei-c.org/ns/1.0 //psf/Home/Documents/projects/konzepte/Sub-Schema/my/pica2tei/tei_lite.xsd'"/>
			<teiHeader>
				<fileDesc>
					<xsl:variable name="var332_let" as="node()*">
						<xsl:variable name="var330_resultof_map" as="node()*">
							<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '034D')]">
								<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
									<xsl:sequence select="(./@node(), ./node())"/>
								</datafield>
							</xsl:for-each>
						</xsl:variable>
						<xsl:for-each select="$var330_resultof_map/ns0:subfield">
							<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
								<xsl:sequence select="(./@node(), ./node())"/>
							</subfield>
						</xsl:for-each>
						<xsl:variable name="var331_resultof_map" as="node()*">
							<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '034M')]">
								<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
									<xsl:sequence select="(./@node(), ./node())"/>
								</datafield>
							</xsl:for-each>
						</xsl:variable>
						<xsl:for-each select="$var331_resultof_map/ns0:subfield">
							<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
								<xsl:sequence select="(./@node(), ./node())"/>
							</subfield>
						</xsl:for-each>
					</xsl:variable>
					<xsl:for-each select="$var332_let">
						<xsl:call-template name="agt:MapTotei_lite_var329_function">
							<xsl:with-param name="par0" select="." as="node()"/>
						</xsl:call-template>
					</xsl:for-each>
					<xsl:variable name="var336_resultof_map" as="node()*" select="$var2_resultof_map"/>
					<xsl:variable name="var337_let" as="node()*">
						<xsl:for-each select="$var336_resultof_map[fn:exists(@tag)][fn:exists(((fn:string(@tag) = '033N'), (fn:string(@tag) = '033O'), (fn:string(@tag) = '033P'))[.])]">
							<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
								<xsl:sequence select="(./@node(), ./node())"/>
							</datafield>
						</xsl:for-each>
					</xsl:variable>
					<xsl:for-each select="$var337_let">
						<xsl:call-template name="agt:MapTotei_lite_var335_function">
							<xsl:with-param name="par0" select="." as="node()"/>
						</xsl:call-template>
					</xsl:for-each>
					<xsl:variable name="var348_resultof_map" as="node()*" select="$var2_resultof_map"/>
					<xsl:variable name="var349_let" as="node()*">
						<xsl:for-each select="$var348_resultof_map[fn:exists(@tag)][(fn:string(@tag) = '011B')]">
							<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
								<xsl:sequence select="(./@node(), ./node())"/>
							</datafield>
						</xsl:for-each>
					</xsl:variable>
					<xsl:for-each select="$var349_let">
						<xsl:call-template name="agt:MapTotei_lite_var347_function">
							<xsl:with-param name="par0" select="." as="node()"/>
						</xsl:call-template>
					</xsl:for-each>
					<sourceDesc>
						<bibl>
							<xsl:variable name="var467_result" as="xs:string?">
								<xsl:choose>
									<xsl:when test="$var42_resultof_exists">
										<xsl:variable name="var430_result" as="xs:boolean">
											<xsl:choose>
												<xsl:when test="$var327_resultof_exists">
													<xsl:variable name="var388_resultof_map" as="node()*" select="$var4_resultof_map"/>
													<xsl:variable name="var389_result" as="xs:string*">
														<xsl:for-each select="((($var388_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'f')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var386_result" as="xs:string">
																<xsl:choose>
																	<xsl:when test="$var27_resultof_exists">
																		<xsl:variable name="var369_result" as="xs:string*">
																			<xsl:if test="$var149_resultof_exists">
																				<xsl:variable name="var368_resultof_map" as="node()*" select="$var4_resultof_map"/>
																				<xsl:for-each select="((($var368_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
																					<xsl:variable name="var366_result" as="xs:string">
																						<xsl:choose>
																							<xsl:when test="$var28_resultof_exists">
																								<xsl:variable name="var358_resultof_map" as="node()*" select="$var4_resultof_map"/>
																								<xsl:variable name="var359_result" as="xs:string*">
																									<xsl:for-each select="((($var358_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																										<xsl:variable name="var357_current" as="node()" select="."/>
																										<xsl:variable name="var356_resultof_map" as="node()*" select="$var4_resultof_map"/>
																										<xsl:for-each select="((($var356_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																											<xsl:variable name="var350_resultof_map" as="xs:string*">
																												<xsl:for-each select="($var357_current/node())[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:variable name="var354_result" as="xs:string">
																												<xsl:choose>
																													<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var350_resultof_map return xs:string($x), ' ')), '@')">
																														<xsl:variable name="var351_resultof_map" as="xs:string*">
																															<xsl:for-each select="($var357_current/node())[fn:boolean(self::text())]">
																																<xsl:sequence select="fn:string(.)"/>
																															</xsl:for-each>
																														</xsl:variable>
																														<xsl:variable name="var352_resultof_map" as="xs:string*">
																															<xsl:for-each select="($var357_current/node())[fn:boolean(self::text())]">
																																<xsl:sequence select="fn:string(.)"/>
																															</xsl:for-each>
																														</xsl:variable>
																														<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var351_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var352_resultof_map return xs:string($x), ' ')), '@'))"/>
																													</xsl:when>
																													<xsl:otherwise>
																														<xsl:variable name="var353_resultof_map" as="xs:string*">
																															<xsl:for-each select="($var357_current/node())[fn:boolean(self::text())]">
																																<xsl:sequence select="fn:string(.)"/>
																															</xsl:for-each>
																														</xsl:variable>
																														<xsl:sequence select="xs:string(fn:string-join(for $x in $var353_resultof_map return xs:string($x), ' '))"/>
																													</xsl:otherwise>
																												</xsl:choose>
																											</xsl:variable>
																											<xsl:variable name="var355_resultof_map" as="xs:string*">
																												<xsl:for-each select="node()[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:sequence select="fn:concat(fn:concat($var354_result, ' / '), xs:string(fn:string-join(for $x in $var355_resultof_map return xs:string($x), ' ')))"/>
																										</xsl:for-each>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:sequence select="xs:string(fn:string-join(for $x in $var359_result return xs:string($x), ' '))"/>
																							</xsl:when>
																							<xsl:otherwise>
																								<xsl:variable name="var364_resultof_map" as="node()*" select="$var4_resultof_map"/>
																								<xsl:variable name="var365_result" as="xs:string*">
																									<xsl:for-each select="((($var364_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																										<xsl:variable name="var360_resultof_map" as="xs:string*">
																											<xsl:for-each select="node()[fn:boolean(self::text())]">
																												<xsl:sequence select="fn:string(.)"/>
																											</xsl:for-each>
																										</xsl:variable>
																										<xsl:choose>
																											<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var360_resultof_map return xs:string($x), ' ')), '@')">
																												<xsl:variable name="var361_resultof_map" as="xs:string*">
																													<xsl:for-each select="node()[fn:boolean(self::text())]">
																														<xsl:sequence select="fn:string(.)"/>
																													</xsl:for-each>
																												</xsl:variable>
																												<xsl:variable name="var362_resultof_map" as="xs:string*">
																													<xsl:for-each select="node()[fn:boolean(self::text())]">
																														<xsl:sequence select="fn:string(.)"/>
																													</xsl:for-each>
																												</xsl:variable>
																												<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var361_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var362_resultof_map return xs:string($x), ' ')), '@'))"/>
																											</xsl:when>
																											<xsl:otherwise>
																												<xsl:variable name="var363_resultof_map" as="xs:string*">
																													<xsl:for-each select="node()[fn:boolean(self::text())]">
																														<xsl:sequence select="fn:string(.)"/>
																													</xsl:for-each>
																												</xsl:variable>
																												<xsl:sequence select="xs:string(fn:string-join(for $x in $var363_resultof_map return xs:string($x), ' '))"/>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:sequence select="xs:string(fn:string-join(for $x in $var365_result return xs:string($x), ' '))"/>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:variable>
																					<xsl:variable name="var367_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="fn:concat(fn:concat($var366_result, ' : '), xs:string(fn:string-join(for $x in $var367_resultof_map return xs:string($x), ' ')))"/>
																				</xsl:for-each>
																			</xsl:if>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var369_result return xs:string($x), ' '))"/>
																	</xsl:when>
																	<xsl:when test="$var28_resultof_exists">
																		<xsl:variable name="var378_resultof_map" as="node()*" select="$var4_resultof_map"/>
																		<xsl:variable name="var379_result" as="xs:string*">
																			<xsl:for-each select="((($var378_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																				<xsl:variable name="var377_current" as="node()" select="."/>
																				<xsl:variable name="var376_resultof_map" as="node()*" select="$var4_resultof_map"/>
																				<xsl:for-each select="((($var376_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																					<xsl:variable name="var370_resultof_map" as="xs:string*">
																						<xsl:for-each select="($var377_current/node())[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:variable name="var374_result" as="xs:string">
																						<xsl:choose>
																							<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var370_resultof_map return xs:string($x), ' ')), '@')">
																								<xsl:variable name="var371_resultof_map" as="xs:string*">
																									<xsl:for-each select="($var377_current/node())[fn:boolean(self::text())]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:variable name="var372_resultof_map" as="xs:string*">
																									<xsl:for-each select="($var377_current/node())[fn:boolean(self::text())]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var371_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var372_resultof_map return xs:string($x), ' ')), '@'))"/>
																							</xsl:when>
																							<xsl:otherwise>
																								<xsl:variable name="var373_resultof_map" as="xs:string*">
																									<xsl:for-each select="($var377_current/node())[fn:boolean(self::text())]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:sequence select="xs:string(fn:string-join(for $x in $var373_resultof_map return xs:string($x), ' '))"/>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:variable>
																					<xsl:variable name="var375_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="fn:concat(fn:concat($var374_result, ' / '), xs:string(fn:string-join(for $x in $var375_resultof_map return xs:string($x), ' ')))"/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var379_result return xs:string($x), ' '))"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:variable name="var384_resultof_map" as="node()*" select="$var4_resultof_map"/>
																		<xsl:variable name="var385_result" as="xs:string*">
																			<xsl:for-each select="((($var384_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																				<xsl:variable name="var380_resultof_map" as="xs:string*">
																					<xsl:for-each select="node()[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var380_resultof_map return xs:string($x), ' ')), '@')">
																						<xsl:variable name="var381_resultof_map" as="xs:string*">
																							<xsl:for-each select="node()[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:variable name="var382_resultof_map" as="xs:string*">
																							<xsl:for-each select="node()[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var381_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var382_resultof_map return xs:string($x), ' ')), '@'))"/>
																					</xsl:when>
																					<xsl:otherwise>
																						<xsl:variable name="var383_resultof_map" as="xs:string*">
																							<xsl:for-each select="node()[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:sequence select="xs:string(fn:string-join(for $x in $var383_resultof_map return xs:string($x), ' '))"/>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var385_result return xs:string($x), ' '))"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:variable>
															<xsl:variable name="var387_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="fn:concat(fn:concat($var386_result, ' = '), xs:string(fn:string-join(for $x in $var387_resultof_map return xs:string($x), ' ')))"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="fn:exists($var389_result)"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:sequence select="fn:false()"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:if test="$var430_result">
											<xsl:variable name="var429_result" as="xs:string*">
												<xsl:if test="$var327_resultof_exists">
													<xsl:variable name="var428_resultof_map" as="node()*" select="$var4_resultof_map"/>
													<xsl:for-each select="((($var428_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'f')])[fn:exists(node()[fn:boolean(self::text())])]">
														<xsl:variable name="var426_result" as="xs:string">
															<xsl:choose>
																<xsl:when test="$var27_resultof_exists">
																	<xsl:variable name="var409_result" as="xs:string*">
																		<xsl:if test="$var149_resultof_exists">
																			<xsl:variable name="var408_resultof_map" as="node()*" select="$var4_resultof_map"/>
																			<xsl:for-each select="((($var408_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
																				<xsl:variable name="var406_result" as="xs:string">
																					<xsl:choose>
																						<xsl:when test="$var28_resultof_exists">
																							<xsl:variable name="var398_resultof_map" as="node()*" select="$var4_resultof_map"/>
																							<xsl:variable name="var399_result" as="xs:string*">
																								<xsl:for-each select="((($var398_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																									<xsl:variable name="var397_current" as="node()" select="."/>
																									<xsl:variable name="var396_resultof_map" as="node()*" select="$var4_resultof_map"/>
																									<xsl:for-each select="((($var396_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																										<xsl:variable name="var390_resultof_map" as="xs:string*">
																											<xsl:for-each select="($var397_current/node())[fn:boolean(self::text())]">
																												<xsl:sequence select="fn:string(.)"/>
																											</xsl:for-each>
																										</xsl:variable>
																										<xsl:variable name="var394_result" as="xs:string">
																											<xsl:choose>
																												<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var390_resultof_map return xs:string($x), ' ')), '@')">
																													<xsl:variable name="var391_resultof_map" as="xs:string*">
																														<xsl:for-each select="($var397_current/node())[fn:boolean(self::text())]">
																															<xsl:sequence select="fn:string(.)"/>
																														</xsl:for-each>
																													</xsl:variable>
																													<xsl:variable name="var392_resultof_map" as="xs:string*">
																														<xsl:for-each select="($var397_current/node())[fn:boolean(self::text())]">
																															<xsl:sequence select="fn:string(.)"/>
																														</xsl:for-each>
																													</xsl:variable>
																													<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var391_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var392_resultof_map return xs:string($x), ' ')), '@'))"/>
																												</xsl:when>
																												<xsl:otherwise>
																													<xsl:variable name="var393_resultof_map" as="xs:string*">
																														<xsl:for-each select="($var397_current/node())[fn:boolean(self::text())]">
																															<xsl:sequence select="fn:string(.)"/>
																														</xsl:for-each>
																													</xsl:variable>
																													<xsl:sequence select="xs:string(fn:string-join(for $x in $var393_resultof_map return xs:string($x), ' '))"/>
																												</xsl:otherwise>
																											</xsl:choose>
																										</xsl:variable>
																										<xsl:variable name="var395_resultof_map" as="xs:string*">
																											<xsl:for-each select="node()[fn:boolean(self::text())]">
																												<xsl:sequence select="fn:string(.)"/>
																											</xsl:for-each>
																										</xsl:variable>
																										<xsl:sequence select="fn:concat(fn:concat($var394_result, ' / '), xs:string(fn:string-join(for $x in $var395_resultof_map return xs:string($x), ' ')))"/>
																									</xsl:for-each>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="xs:string(fn:string-join(for $x in $var399_result return xs:string($x), ' '))"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:variable name="var404_resultof_map" as="node()*" select="$var4_resultof_map"/>
																							<xsl:variable name="var405_result" as="xs:string*">
																								<xsl:for-each select="((($var404_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																									<xsl:variable name="var400_resultof_map" as="xs:string*">
																										<xsl:for-each select="node()[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var400_resultof_map return xs:string($x), ' ')), '@')">
																											<xsl:variable name="var401_resultof_map" as="xs:string*">
																												<xsl:for-each select="node()[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:variable name="var402_resultof_map" as="xs:string*">
																												<xsl:for-each select="node()[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var401_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var402_resultof_map return xs:string($x), ' ')), '@'))"/>
																										</xsl:when>
																										<xsl:otherwise>
																											<xsl:variable name="var403_resultof_map" as="xs:string*">
																												<xsl:for-each select="node()[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:sequence select="xs:string(fn:string-join(for $x in $var403_resultof_map return xs:string($x), ' '))"/>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="xs:string(fn:string-join(for $x in $var405_result return xs:string($x), ' '))"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:variable>
																				<xsl:variable name="var407_resultof_map" as="xs:string*">
																					<xsl:for-each select="node()[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="fn:concat(fn:concat($var406_result, ' : '), xs:string(fn:string-join(for $x in $var407_resultof_map return xs:string($x), ' ')))"/>
																			</xsl:for-each>
																		</xsl:if>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var409_result return xs:string($x), ' '))"/>
																</xsl:when>
																<xsl:when test="$var28_resultof_exists">
																	<xsl:variable name="var418_resultof_map" as="node()*" select="$var4_resultof_map"/>
																	<xsl:variable name="var419_result" as="xs:string*">
																		<xsl:for-each select="((($var418_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																			<xsl:variable name="var417_current" as="node()" select="."/>
																			<xsl:variable name="var416_resultof_map" as="node()*" select="$var4_resultof_map"/>
																			<xsl:for-each select="((($var416_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																				<xsl:variable name="var410_resultof_map" as="xs:string*">
																					<xsl:for-each select="($var417_current/node())[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:variable name="var414_result" as="xs:string">
																					<xsl:choose>
																						<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var410_resultof_map return xs:string($x), ' ')), '@')">
																							<xsl:variable name="var411_resultof_map" as="xs:string*">
																								<xsl:for-each select="($var417_current/node())[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:variable name="var412_resultof_map" as="xs:string*">
																								<xsl:for-each select="($var417_current/node())[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var411_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var412_resultof_map return xs:string($x), ' ')), '@'))"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:variable name="var413_resultof_map" as="xs:string*">
																								<xsl:for-each select="($var417_current/node())[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="xs:string(fn:string-join(for $x in $var413_resultof_map return xs:string($x), ' '))"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:variable>
																				<xsl:variable name="var415_resultof_map" as="xs:string*">
																					<xsl:for-each select="node()[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="fn:concat(fn:concat($var414_result, ' / '), xs:string(fn:string-join(for $x in $var415_resultof_map return xs:string($x), ' ')))"/>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var419_result return xs:string($x), ' '))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="var424_resultof_map" as="node()*" select="$var4_resultof_map"/>
																	<xsl:variable name="var425_result" as="xs:string*">
																		<xsl:for-each select="((($var424_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																			<xsl:variable name="var420_resultof_map" as="xs:string*">
																				<xsl:for-each select="node()[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var420_resultof_map return xs:string($x), ' ')), '@')">
																					<xsl:variable name="var421_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:variable name="var422_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var421_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var422_resultof_map return xs:string($x), ' ')), '@'))"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:variable name="var423_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="xs:string(fn:string-join(for $x in $var423_resultof_map return xs:string($x), ' '))"/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var425_result return xs:string($x), ' '))"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:variable>
														<xsl:variable name="var427_resultof_map" as="xs:string*">
															<xsl:for-each select="node()[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="fn:concat(fn:concat($var426_result, ' = '), xs:string(fn:string-join(for $x in $var427_resultof_map return xs:string($x), ' ')))"/>
													</xsl:for-each>
												</xsl:if>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var429_result return xs:string($x), ' '))"/>
										</xsl:if>
									</xsl:when>
									<xsl:otherwise>
										<xsl:if test="$var327_resultof_exists">
											<xsl:choose>
												<xsl:when test="$var27_resultof_exists">
													<xsl:variable name="var450_result" as="xs:string*">
														<xsl:if test="$var149_resultof_exists">
															<xsl:variable name="var449_resultof_map" as="node()*" select="$var4_resultof_map"/>
															<xsl:for-each select="((($var449_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var447_result" as="xs:string">
																	<xsl:choose>
																		<xsl:when test="$var28_resultof_exists">
																			<xsl:variable name="var439_resultof_map" as="node()*" select="$var4_resultof_map"/>
																			<xsl:variable name="var440_result" as="xs:string*">
																				<xsl:for-each select="((($var439_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																					<xsl:variable name="var438_current" as="node()" select="."/>
																					<xsl:variable name="var437_resultof_map" as="node()*" select="$var4_resultof_map"/>
																					<xsl:for-each select="((($var437_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																						<xsl:variable name="var431_resultof_map" as="xs:string*">
																							<xsl:for-each select="($var438_current/node())[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:variable name="var435_result" as="xs:string">
																							<xsl:choose>
																								<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var431_resultof_map return xs:string($x), ' ')), '@')">
																									<xsl:variable name="var432_resultof_map" as="xs:string*">
																										<xsl:for-each select="($var438_current/node())[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:variable name="var433_resultof_map" as="xs:string*">
																										<xsl:for-each select="($var438_current/node())[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var432_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var433_resultof_map return xs:string($x), ' ')), '@'))"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<xsl:variable name="var434_resultof_map" as="xs:string*">
																										<xsl:for-each select="($var438_current/node())[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:sequence select="xs:string(fn:string-join(for $x in $var434_resultof_map return xs:string($x), ' '))"/>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:variable>
																						<xsl:variable name="var436_resultof_map" as="xs:string*">
																							<xsl:for-each select="node()[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:sequence select="fn:concat(fn:concat($var435_result, ' / '), xs:string(fn:string-join(for $x in $var436_resultof_map return xs:string($x), ' ')))"/>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var440_result return xs:string($x), ' '))"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:variable name="var445_resultof_map" as="node()*" select="$var4_resultof_map"/>
																			<xsl:variable name="var446_result" as="xs:string*">
																				<xsl:for-each select="((($var445_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																					<xsl:variable name="var441_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var441_resultof_map return xs:string($x), ' ')), '@')">
																							<xsl:variable name="var442_resultof_map" as="xs:string*">
																								<xsl:for-each select="node()[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:variable name="var443_resultof_map" as="xs:string*">
																								<xsl:for-each select="node()[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var442_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var443_resultof_map return xs:string($x), ' ')), '@'))"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:variable name="var444_resultof_map" as="xs:string*">
																								<xsl:for-each select="node()[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="xs:string(fn:string-join(for $x in $var444_resultof_map return xs:string($x), ' '))"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var446_result return xs:string($x), ' '))"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:variable>
																<xsl:variable name="var448_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="fn:concat(fn:concat($var447_result, ' : '), xs:string(fn:string-join(for $x in $var448_resultof_map return xs:string($x), ' ')))"/>
															</xsl:for-each>
														</xsl:if>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var450_result return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:when test="$var28_resultof_exists">
													<xsl:variable name="var459_resultof_map" as="node()*" select="$var4_resultof_map"/>
													<xsl:variable name="var460_result" as="xs:string*">
														<xsl:for-each select="((($var459_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var458_current" as="node()" select="."/>
															<xsl:variable name="var457_resultof_map" as="node()*" select="$var4_resultof_map"/>
															<xsl:for-each select="((($var457_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var451_resultof_map" as="xs:string*">
																	<xsl:for-each select="($var458_current/node())[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:variable name="var455_result" as="xs:string">
																	<xsl:choose>
																		<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var451_resultof_map return xs:string($x), ' ')), '@')">
																			<xsl:variable name="var452_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var458_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:variable name="var453_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var458_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var452_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var453_resultof_map return xs:string($x), ' ')), '@'))"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:variable name="var454_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var458_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var454_resultof_map return xs:string($x), ' '))"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:variable>
																<xsl:variable name="var456_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="fn:concat(fn:concat($var455_result, ' / '), xs:string(fn:string-join(for $x in $var456_resultof_map return xs:string($x), ' ')))"/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var460_result return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="var465_resultof_map" as="node()*" select="$var4_resultof_map"/>
													<xsl:variable name="var466_result" as="xs:string*">
														<xsl:for-each select="((($var465_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var461_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:choose>
																<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var461_resultof_map return xs:string($x), ' ')), '@')">
																	<xsl:variable name="var462_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:variable name="var463_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var462_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var463_resultof_map return xs:string($x), ' ')), '@'))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="var464_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var464_resultof_map return xs:string($x), ' '))"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var466_result return xs:string($x), ' '))"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:if>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:if test="fn:exists($var467_result)">
								<title>
									<xsl:choose>
										<xsl:when test="$var42_resultof_exists">
											<xsl:variable name="var507_result" as="xs:string*">
												<xsl:if test="$var327_resultof_exists">
													<xsl:variable name="var506_resultof_map" as="node()*" select="$var4_resultof_map"/>
													<xsl:for-each select="((($var506_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'f')])[fn:exists(node()[fn:boolean(self::text())])]">
														<xsl:variable name="var504_result" as="xs:string">
															<xsl:choose>
																<xsl:when test="$var27_resultof_exists">
																	<xsl:variable name="var487_result" as="xs:string*">
																		<xsl:if test="$var149_resultof_exists">
																			<xsl:variable name="var486_resultof_map" as="node()*" select="$var4_resultof_map"/>
																			<xsl:for-each select="((($var486_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
																				<xsl:variable name="var484_result" as="xs:string">
																					<xsl:choose>
																						<xsl:when test="$var28_resultof_exists">
																							<xsl:variable name="var476_resultof_map" as="node()*" select="$var4_resultof_map"/>
																							<xsl:variable name="var477_result" as="xs:string*">
																								<xsl:for-each select="((($var476_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																									<xsl:variable name="var475_current" as="node()" select="."/>
																									<xsl:variable name="var474_resultof_map" as="node()*" select="$var4_resultof_map"/>
																									<xsl:for-each select="((($var474_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																										<xsl:variable name="var468_resultof_map" as="xs:string*">
																											<xsl:for-each select="($var475_current/node())[fn:boolean(self::text())]">
																												<xsl:sequence select="fn:string(.)"/>
																											</xsl:for-each>
																										</xsl:variable>
																										<xsl:variable name="var472_result" as="xs:string">
																											<xsl:choose>
																												<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var468_resultof_map return xs:string($x), ' ')), '@')">
																													<xsl:variable name="var469_resultof_map" as="xs:string*">
																														<xsl:for-each select="($var475_current/node())[fn:boolean(self::text())]">
																															<xsl:sequence select="fn:string(.)"/>
																														</xsl:for-each>
																													</xsl:variable>
																													<xsl:variable name="var470_resultof_map" as="xs:string*">
																														<xsl:for-each select="($var475_current/node())[fn:boolean(self::text())]">
																															<xsl:sequence select="fn:string(.)"/>
																														</xsl:for-each>
																													</xsl:variable>
																													<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var469_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var470_resultof_map return xs:string($x), ' ')), '@'))"/>
																												</xsl:when>
																												<xsl:otherwise>
																													<xsl:variable name="var471_resultof_map" as="xs:string*">
																														<xsl:for-each select="($var475_current/node())[fn:boolean(self::text())]">
																															<xsl:sequence select="fn:string(.)"/>
																														</xsl:for-each>
																													</xsl:variable>
																													<xsl:sequence select="xs:string(fn:string-join(for $x in $var471_resultof_map return xs:string($x), ' '))"/>
																												</xsl:otherwise>
																											</xsl:choose>
																										</xsl:variable>
																										<xsl:variable name="var473_resultof_map" as="xs:string*">
																											<xsl:for-each select="node()[fn:boolean(self::text())]">
																												<xsl:sequence select="fn:string(.)"/>
																											</xsl:for-each>
																										</xsl:variable>
																										<xsl:sequence select="fn:concat(fn:concat($var472_result, ' / '), xs:string(fn:string-join(for $x in $var473_resultof_map return xs:string($x), ' ')))"/>
																									</xsl:for-each>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="xs:string(fn:string-join(for $x in $var477_result return xs:string($x), ' '))"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:variable name="var482_resultof_map" as="node()*" select="$var4_resultof_map"/>
																							<xsl:variable name="var483_result" as="xs:string*">
																								<xsl:for-each select="((($var482_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																									<xsl:variable name="var478_resultof_map" as="xs:string*">
																										<xsl:for-each select="node()[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var478_resultof_map return xs:string($x), ' ')), '@')">
																											<xsl:variable name="var479_resultof_map" as="xs:string*">
																												<xsl:for-each select="node()[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:variable name="var480_resultof_map" as="xs:string*">
																												<xsl:for-each select="node()[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var479_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var480_resultof_map return xs:string($x), ' ')), '@'))"/>
																										</xsl:when>
																										<xsl:otherwise>
																											<xsl:variable name="var481_resultof_map" as="xs:string*">
																												<xsl:for-each select="node()[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:sequence select="xs:string(fn:string-join(for $x in $var481_resultof_map return xs:string($x), ' '))"/>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="xs:string(fn:string-join(for $x in $var483_result return xs:string($x), ' '))"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:variable>
																				<xsl:variable name="var485_resultof_map" as="xs:string*">
																					<xsl:for-each select="node()[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="fn:concat(fn:concat($var484_result, ' : '), xs:string(fn:string-join(for $x in $var485_resultof_map return xs:string($x), ' ')))"/>
																			</xsl:for-each>
																		</xsl:if>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var487_result return xs:string($x), ' '))"/>
																</xsl:when>
																<xsl:when test="$var28_resultof_exists">
																	<xsl:variable name="var496_resultof_map" as="node()*" select="$var4_resultof_map"/>
																	<xsl:variable name="var497_result" as="xs:string*">
																		<xsl:for-each select="((($var496_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																			<xsl:variable name="var495_current" as="node()" select="."/>
																			<xsl:variable name="var494_resultof_map" as="node()*" select="$var4_resultof_map"/>
																			<xsl:for-each select="((($var494_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																				<xsl:variable name="var488_resultof_map" as="xs:string*">
																					<xsl:for-each select="($var495_current/node())[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:variable name="var492_result" as="xs:string">
																					<xsl:choose>
																						<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var488_resultof_map return xs:string($x), ' ')), '@')">
																							<xsl:variable name="var489_resultof_map" as="xs:string*">
																								<xsl:for-each select="($var495_current/node())[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:variable name="var490_resultof_map" as="xs:string*">
																								<xsl:for-each select="($var495_current/node())[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var489_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var490_resultof_map return xs:string($x), ' ')), '@'))"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:variable name="var491_resultof_map" as="xs:string*">
																								<xsl:for-each select="($var495_current/node())[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="xs:string(fn:string-join(for $x in $var491_resultof_map return xs:string($x), ' '))"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:variable>
																				<xsl:variable name="var493_resultof_map" as="xs:string*">
																					<xsl:for-each select="node()[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="fn:concat(fn:concat($var492_result, ' / '), xs:string(fn:string-join(for $x in $var493_resultof_map return xs:string($x), ' ')))"/>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var497_result return xs:string($x), ' '))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="var502_resultof_map" as="node()*" select="$var4_resultof_map"/>
																	<xsl:variable name="var503_result" as="xs:string*">
																		<xsl:for-each select="((($var502_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																			<xsl:variable name="var498_resultof_map" as="xs:string*">
																				<xsl:for-each select="node()[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var498_resultof_map return xs:string($x), ' ')), '@')">
																					<xsl:variable name="var499_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:variable name="var500_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var499_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var500_resultof_map return xs:string($x), ' ')), '@'))"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:variable name="var501_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="xs:string(fn:string-join(for $x in $var501_resultof_map return xs:string($x), ' '))"/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var503_result return xs:string($x), ' '))"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:variable>
														<xsl:variable name="var505_resultof_map" as="xs:string*">
															<xsl:for-each select="node()[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="fn:concat(fn:concat($var504_result, ' = '), xs:string(fn:string-join(for $x in $var505_resultof_map return xs:string($x), ' ')))"/>
													</xsl:for-each>
												</xsl:if>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var507_result return xs:string($x), ' '))"/>
										</xsl:when>
										<xsl:when test="$var27_resultof_exists">
											<xsl:variable name="var527_result" as="xs:string*">
												<xsl:if test="$var149_resultof_exists">
													<xsl:variable name="var526_resultof_map" as="node()*" select="$var4_resultof_map"/>
													<xsl:for-each select="((($var526_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
														<xsl:variable name="var524_result" as="xs:string">
															<xsl:choose>
																<xsl:when test="$var28_resultof_exists">
																	<xsl:variable name="var516_resultof_map" as="node()*" select="$var4_resultof_map"/>
																	<xsl:variable name="var517_result" as="xs:string*">
																		<xsl:for-each select="((($var516_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																			<xsl:variable name="var515_current" as="node()" select="."/>
																			<xsl:variable name="var514_resultof_map" as="node()*" select="$var4_resultof_map"/>
																			<xsl:for-each select="((($var514_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																				<xsl:variable name="var508_resultof_map" as="xs:string*">
																					<xsl:for-each select="($var515_current/node())[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:variable name="var512_result" as="xs:string">
																					<xsl:choose>
																						<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var508_resultof_map return xs:string($x), ' ')), '@')">
																							<xsl:variable name="var509_resultof_map" as="xs:string*">
																								<xsl:for-each select="($var515_current/node())[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:variable name="var510_resultof_map" as="xs:string*">
																								<xsl:for-each select="($var515_current/node())[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var509_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var510_resultof_map return xs:string($x), ' ')), '@'))"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:variable name="var511_resultof_map" as="xs:string*">
																								<xsl:for-each select="($var515_current/node())[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="xs:string(fn:string-join(for $x in $var511_resultof_map return xs:string($x), ' '))"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:variable>
																				<xsl:variable name="var513_resultof_map" as="xs:string*">
																					<xsl:for-each select="node()[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="fn:concat(fn:concat($var512_result, ' / '), xs:string(fn:string-join(for $x in $var513_resultof_map return xs:string($x), ' ')))"/>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var517_result return xs:string($x), ' '))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="var522_resultof_map" as="node()*" select="$var4_resultof_map"/>
																	<xsl:variable name="var523_result" as="xs:string*">
																		<xsl:for-each select="((($var522_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																			<xsl:variable name="var518_resultof_map" as="xs:string*">
																				<xsl:for-each select="node()[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var518_resultof_map return xs:string($x), ' ')), '@')">
																					<xsl:variable name="var519_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:variable name="var520_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var519_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var520_resultof_map return xs:string($x), ' ')), '@'))"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:variable name="var521_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="xs:string(fn:string-join(for $x in $var521_resultof_map return xs:string($x), ' '))"/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var523_result return xs:string($x), ' '))"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:variable>
														<xsl:variable name="var525_resultof_map" as="xs:string*">
															<xsl:for-each select="node()[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="fn:concat(fn:concat($var524_result, ' : '), xs:string(fn:string-join(for $x in $var525_resultof_map return xs:string($x), ' ')))"/>
													</xsl:for-each>
												</xsl:if>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var527_result return xs:string($x), ' '))"/>
										</xsl:when>
										<xsl:when test="$var28_resultof_exists">
											<xsl:variable name="var536_resultof_map" as="node()*" select="$var4_resultof_map"/>
											<xsl:variable name="var537_result" as="xs:string*">
												<xsl:for-each select="((($var536_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
													<xsl:variable name="var535_current" as="node()" select="."/>
													<xsl:variable name="var534_resultof_map" as="node()*" select="$var4_resultof_map"/>
													<xsl:for-each select="((($var534_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
														<xsl:variable name="var528_resultof_map" as="xs:string*">
															<xsl:for-each select="($var535_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:variable name="var532_result" as="xs:string">
															<xsl:choose>
																<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var528_resultof_map return xs:string($x), ' ')), '@')">
																	<xsl:variable name="var529_resultof_map" as="xs:string*">
																		<xsl:for-each select="($var535_current/node())[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:variable name="var530_resultof_map" as="xs:string*">
																		<xsl:for-each select="($var535_current/node())[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var529_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var530_resultof_map return xs:string($x), ' ')), '@'))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="var531_resultof_map" as="xs:string*">
																		<xsl:for-each select="($var535_current/node())[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var531_resultof_map return xs:string($x), ' '))"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:variable>
														<xsl:variable name="var533_resultof_map" as="xs:string*">
															<xsl:for-each select="node()[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="fn:concat(fn:concat($var532_result, ' / '), xs:string(fn:string-join(for $x in $var533_resultof_map return xs:string($x), ' ')))"/>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var537_result return xs:string($x), ' '))"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="var542_resultof_map" as="node()*" select="$var4_resultof_map"/>
											<xsl:variable name="var543_result" as="xs:string*">
												<xsl:for-each select="((($var542_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
													<xsl:variable name="var538_resultof_map" as="xs:string*">
														<xsl:for-each select="node()[fn:boolean(self::text())]">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:choose>
														<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var538_resultof_map return xs:string($x), ' ')), '@')">
															<xsl:variable name="var539_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:variable name="var540_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var539_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var540_resultof_map return xs:string($x), ' ')), '@'))"/>
														</xsl:when>
														<xsl:otherwise>
															<xsl:variable name="var541_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="xs:string(fn:string-join(for $x in $var541_resultof_map return xs:string($x), ' '))"/>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var543_result return xs:string($x), ' '))"/>
										</xsl:otherwise>
									</xsl:choose>
								</title>
							</xsl:if>
							<xsl:variable name="var661_result" as="xs:string?">
								<xsl:choose>
									<xsl:when test="$var33_resultof_exists">
										<xsl:variable name="var624_result" as="xs:boolean">
											<xsl:choose>
												<xsl:when test="$var326_resultof_exists">
													<xsl:variable name="var582_resultof_map" as="node()*" select="$var5_resultof_map"/>
													<xsl:variable name="var583_result" as="xs:string*">
														<xsl:for-each select="((($var582_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'f')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var580_result" as="xs:string">
																<xsl:choose>
																	<xsl:when test="$var38_resultof_exists">
																		<xsl:variable name="var563_result" as="xs:string*">
																			<xsl:if test="$var150_resultof_exists">
																				<xsl:variable name="var562_resultof_map" as="node()*" select="$var5_resultof_map"/>
																				<xsl:for-each select="((($var562_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
																					<xsl:variable name="var560_result" as="xs:string">
																						<xsl:choose>
																							<xsl:when test="$var43_resultof_exists">
																								<xsl:variable name="var552_resultof_map" as="node()*" select="$var5_resultof_map"/>
																								<xsl:variable name="var553_result" as="xs:string*">
																									<xsl:for-each select="((($var552_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																										<xsl:variable name="var551_current" as="node()" select="."/>
																										<xsl:variable name="var550_resultof_map" as="node()*" select="$var5_resultof_map"/>
																										<xsl:for-each select="((($var550_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																											<xsl:variable name="var544_resultof_map" as="xs:string*">
																												<xsl:for-each select="($var551_current/node())[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:variable name="var548_result" as="xs:string">
																												<xsl:choose>
																													<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var544_resultof_map return xs:string($x), ' ')), '@')">
																														<xsl:variable name="var545_resultof_map" as="xs:string*">
																															<xsl:for-each select="($var551_current/node())[fn:boolean(self::text())]">
																																<xsl:sequence select="fn:string(.)"/>
																															</xsl:for-each>
																														</xsl:variable>
																														<xsl:variable name="var546_resultof_map" as="xs:string*">
																															<xsl:for-each select="($var551_current/node())[fn:boolean(self::text())]">
																																<xsl:sequence select="fn:string(.)"/>
																															</xsl:for-each>
																														</xsl:variable>
																														<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var545_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var546_resultof_map return xs:string($x), ' ')), '@'))"/>
																													</xsl:when>
																													<xsl:otherwise>
																														<xsl:variable name="var547_resultof_map" as="xs:string*">
																															<xsl:for-each select="($var551_current/node())[fn:boolean(self::text())]">
																																<xsl:sequence select="fn:string(.)"/>
																															</xsl:for-each>
																														</xsl:variable>
																														<xsl:sequence select="xs:string(fn:string-join(for $x in $var547_resultof_map return xs:string($x), ' '))"/>
																													</xsl:otherwise>
																												</xsl:choose>
																											</xsl:variable>
																											<xsl:variable name="var549_resultof_map" as="xs:string*">
																												<xsl:for-each select="node()[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:sequence select="fn:concat(fn:concat($var548_result, ' / '), xs:string(fn:string-join(for $x in $var549_resultof_map return xs:string($x), ' ')))"/>
																										</xsl:for-each>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:sequence select="xs:string(fn:string-join(for $x in $var553_result return xs:string($x), ' '))"/>
																							</xsl:when>
																							<xsl:otherwise>
																								<xsl:variable name="var558_resultof_map" as="node()*" select="$var5_resultof_map"/>
																								<xsl:variable name="var559_result" as="xs:string*">
																									<xsl:for-each select="((($var558_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																										<xsl:variable name="var554_resultof_map" as="xs:string*">
																											<xsl:for-each select="node()[fn:boolean(self::text())]">
																												<xsl:sequence select="fn:string(.)"/>
																											</xsl:for-each>
																										</xsl:variable>
																										<xsl:choose>
																											<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var554_resultof_map return xs:string($x), ' ')), '@')">
																												<xsl:variable name="var555_resultof_map" as="xs:string*">
																													<xsl:for-each select="node()[fn:boolean(self::text())]">
																														<xsl:sequence select="fn:string(.)"/>
																													</xsl:for-each>
																												</xsl:variable>
																												<xsl:variable name="var556_resultof_map" as="xs:string*">
																													<xsl:for-each select="node()[fn:boolean(self::text())]">
																														<xsl:sequence select="fn:string(.)"/>
																													</xsl:for-each>
																												</xsl:variable>
																												<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var555_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var556_resultof_map return xs:string($x), ' ')), '@'))"/>
																											</xsl:when>
																											<xsl:otherwise>
																												<xsl:variable name="var557_resultof_map" as="xs:string*">
																													<xsl:for-each select="node()[fn:boolean(self::text())]">
																														<xsl:sequence select="fn:string(.)"/>
																													</xsl:for-each>
																												</xsl:variable>
																												<xsl:sequence select="xs:string(fn:string-join(for $x in $var557_resultof_map return xs:string($x), ' '))"/>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:sequence select="xs:string(fn:string-join(for $x in $var559_result return xs:string($x), ' '))"/>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:variable>
																					<xsl:variable name="var561_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="fn:concat(fn:concat($var560_result, ' : '), xs:string(fn:string-join(for $x in $var561_resultof_map return xs:string($x), ' ')))"/>
																				</xsl:for-each>
																			</xsl:if>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var563_result return xs:string($x), ' '))"/>
																	</xsl:when>
																	<xsl:when test="$var43_resultof_exists">
																		<xsl:variable name="var572_resultof_map" as="node()*" select="$var5_resultof_map"/>
																		<xsl:variable name="var573_result" as="xs:string*">
																			<xsl:for-each select="((($var572_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																				<xsl:variable name="var571_current" as="node()" select="."/>
																				<xsl:variable name="var570_resultof_map" as="node()*" select="$var5_resultof_map"/>
																				<xsl:for-each select="((($var570_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																					<xsl:variable name="var564_resultof_map" as="xs:string*">
																						<xsl:for-each select="($var571_current/node())[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:variable name="var568_result" as="xs:string">
																						<xsl:choose>
																							<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var564_resultof_map return xs:string($x), ' ')), '@')">
																								<xsl:variable name="var565_resultof_map" as="xs:string*">
																									<xsl:for-each select="($var571_current/node())[fn:boolean(self::text())]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:variable name="var566_resultof_map" as="xs:string*">
																									<xsl:for-each select="($var571_current/node())[fn:boolean(self::text())]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var565_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var566_resultof_map return xs:string($x), ' ')), '@'))"/>
																							</xsl:when>
																							<xsl:otherwise>
																								<xsl:variable name="var567_resultof_map" as="xs:string*">
																									<xsl:for-each select="($var571_current/node())[fn:boolean(self::text())]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:sequence select="xs:string(fn:string-join(for $x in $var567_resultof_map return xs:string($x), ' '))"/>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:variable>
																					<xsl:variable name="var569_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="fn:concat(fn:concat($var568_result, ' / '), xs:string(fn:string-join(for $x in $var569_resultof_map return xs:string($x), ' ')))"/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var573_result return xs:string($x), ' '))"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:variable name="var578_resultof_map" as="node()*" select="$var5_resultof_map"/>
																		<xsl:variable name="var579_result" as="xs:string*">
																			<xsl:for-each select="((($var578_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																				<xsl:variable name="var574_resultof_map" as="xs:string*">
																					<xsl:for-each select="node()[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var574_resultof_map return xs:string($x), ' ')), '@')">
																						<xsl:variable name="var575_resultof_map" as="xs:string*">
																							<xsl:for-each select="node()[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:variable name="var576_resultof_map" as="xs:string*">
																							<xsl:for-each select="node()[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var575_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var576_resultof_map return xs:string($x), ' ')), '@'))"/>
																					</xsl:when>
																					<xsl:otherwise>
																						<xsl:variable name="var577_resultof_map" as="xs:string*">
																							<xsl:for-each select="node()[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:sequence select="xs:string(fn:string-join(for $x in $var577_resultof_map return xs:string($x), ' '))"/>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var579_result return xs:string($x), ' '))"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:variable>
															<xsl:variable name="var581_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="fn:concat(fn:concat($var580_result, ' = '), xs:string(fn:string-join(for $x in $var581_resultof_map return xs:string($x), ' ')))"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="fn:exists($var583_result)"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:sequence select="fn:false()"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:if test="$var624_result">
											<xsl:variable name="var623_result" as="xs:string*">
												<xsl:if test="$var326_resultof_exists">
													<xsl:variable name="var622_resultof_map" as="node()*" select="$var5_resultof_map"/>
													<xsl:for-each select="((($var622_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'f')])[fn:exists(node()[fn:boolean(self::text())])]">
														<xsl:variable name="var620_result" as="xs:string">
															<xsl:choose>
																<xsl:when test="$var38_resultof_exists">
																	<xsl:variable name="var603_result" as="xs:string*">
																		<xsl:if test="$var150_resultof_exists">
																			<xsl:variable name="var602_resultof_map" as="node()*" select="$var5_resultof_map"/>
																			<xsl:for-each select="((($var602_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
																				<xsl:variable name="var600_result" as="xs:string">
																					<xsl:choose>
																						<xsl:when test="$var43_resultof_exists">
																							<xsl:variable name="var592_resultof_map" as="node()*" select="$var5_resultof_map"/>
																							<xsl:variable name="var593_result" as="xs:string*">
																								<xsl:for-each select="((($var592_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																									<xsl:variable name="var591_current" as="node()" select="."/>
																									<xsl:variable name="var590_resultof_map" as="node()*" select="$var5_resultof_map"/>
																									<xsl:for-each select="((($var590_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																										<xsl:variable name="var584_resultof_map" as="xs:string*">
																											<xsl:for-each select="($var591_current/node())[fn:boolean(self::text())]">
																												<xsl:sequence select="fn:string(.)"/>
																											</xsl:for-each>
																										</xsl:variable>
																										<xsl:variable name="var588_result" as="xs:string">
																											<xsl:choose>
																												<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var584_resultof_map return xs:string($x), ' ')), '@')">
																													<xsl:variable name="var585_resultof_map" as="xs:string*">
																														<xsl:for-each select="($var591_current/node())[fn:boolean(self::text())]">
																															<xsl:sequence select="fn:string(.)"/>
																														</xsl:for-each>
																													</xsl:variable>
																													<xsl:variable name="var586_resultof_map" as="xs:string*">
																														<xsl:for-each select="($var591_current/node())[fn:boolean(self::text())]">
																															<xsl:sequence select="fn:string(.)"/>
																														</xsl:for-each>
																													</xsl:variable>
																													<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var585_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var586_resultof_map return xs:string($x), ' ')), '@'))"/>
																												</xsl:when>
																												<xsl:otherwise>
																													<xsl:variable name="var587_resultof_map" as="xs:string*">
																														<xsl:for-each select="($var591_current/node())[fn:boolean(self::text())]">
																															<xsl:sequence select="fn:string(.)"/>
																														</xsl:for-each>
																													</xsl:variable>
																													<xsl:sequence select="xs:string(fn:string-join(for $x in $var587_resultof_map return xs:string($x), ' '))"/>
																												</xsl:otherwise>
																											</xsl:choose>
																										</xsl:variable>
																										<xsl:variable name="var589_resultof_map" as="xs:string*">
																											<xsl:for-each select="node()[fn:boolean(self::text())]">
																												<xsl:sequence select="fn:string(.)"/>
																											</xsl:for-each>
																										</xsl:variable>
																										<xsl:sequence select="fn:concat(fn:concat($var588_result, ' / '), xs:string(fn:string-join(for $x in $var589_resultof_map return xs:string($x), ' ')))"/>
																									</xsl:for-each>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="xs:string(fn:string-join(for $x in $var593_result return xs:string($x), ' '))"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:variable name="var598_resultof_map" as="node()*" select="$var5_resultof_map"/>
																							<xsl:variable name="var599_result" as="xs:string*">
																								<xsl:for-each select="((($var598_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																									<xsl:variable name="var594_resultof_map" as="xs:string*">
																										<xsl:for-each select="node()[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var594_resultof_map return xs:string($x), ' ')), '@')">
																											<xsl:variable name="var595_resultof_map" as="xs:string*">
																												<xsl:for-each select="node()[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:variable name="var596_resultof_map" as="xs:string*">
																												<xsl:for-each select="node()[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var595_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var596_resultof_map return xs:string($x), ' ')), '@'))"/>
																										</xsl:when>
																										<xsl:otherwise>
																											<xsl:variable name="var597_resultof_map" as="xs:string*">
																												<xsl:for-each select="node()[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:sequence select="xs:string(fn:string-join(for $x in $var597_resultof_map return xs:string($x), ' '))"/>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="xs:string(fn:string-join(for $x in $var599_result return xs:string($x), ' '))"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:variable>
																				<xsl:variable name="var601_resultof_map" as="xs:string*">
																					<xsl:for-each select="node()[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="fn:concat(fn:concat($var600_result, ' : '), xs:string(fn:string-join(for $x in $var601_resultof_map return xs:string($x), ' ')))"/>
																			</xsl:for-each>
																		</xsl:if>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var603_result return xs:string($x), ' '))"/>
																</xsl:when>
																<xsl:when test="$var43_resultof_exists">
																	<xsl:variable name="var612_resultof_map" as="node()*" select="$var5_resultof_map"/>
																	<xsl:variable name="var613_result" as="xs:string*">
																		<xsl:for-each select="((($var612_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																			<xsl:variable name="var611_current" as="node()" select="."/>
																			<xsl:variable name="var610_resultof_map" as="node()*" select="$var5_resultof_map"/>
																			<xsl:for-each select="((($var610_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																				<xsl:variable name="var604_resultof_map" as="xs:string*">
																					<xsl:for-each select="($var611_current/node())[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:variable name="var608_result" as="xs:string">
																					<xsl:choose>
																						<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var604_resultof_map return xs:string($x), ' ')), '@')">
																							<xsl:variable name="var605_resultof_map" as="xs:string*">
																								<xsl:for-each select="($var611_current/node())[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:variable name="var606_resultof_map" as="xs:string*">
																								<xsl:for-each select="($var611_current/node())[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var605_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var606_resultof_map return xs:string($x), ' ')), '@'))"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:variable name="var607_resultof_map" as="xs:string*">
																								<xsl:for-each select="($var611_current/node())[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="xs:string(fn:string-join(for $x in $var607_resultof_map return xs:string($x), ' '))"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:variable>
																				<xsl:variable name="var609_resultof_map" as="xs:string*">
																					<xsl:for-each select="node()[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="fn:concat(fn:concat($var608_result, ' / '), xs:string(fn:string-join(for $x in $var609_resultof_map return xs:string($x), ' ')))"/>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var613_result return xs:string($x), ' '))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="var618_resultof_map" as="node()*" select="$var5_resultof_map"/>
																	<xsl:variable name="var619_result" as="xs:string*">
																		<xsl:for-each select="((($var618_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																			<xsl:variable name="var614_resultof_map" as="xs:string*">
																				<xsl:for-each select="node()[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var614_resultof_map return xs:string($x), ' ')), '@')">
																					<xsl:variable name="var615_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:variable name="var616_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var615_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var616_resultof_map return xs:string($x), ' ')), '@'))"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:variable name="var617_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="xs:string(fn:string-join(for $x in $var617_resultof_map return xs:string($x), ' '))"/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var619_result return xs:string($x), ' '))"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:variable>
														<xsl:variable name="var621_resultof_map" as="xs:string*">
															<xsl:for-each select="node()[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="fn:concat(fn:concat($var620_result, ' = '), xs:string(fn:string-join(for $x in $var621_resultof_map return xs:string($x), ' ')))"/>
													</xsl:for-each>
												</xsl:if>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var623_result return xs:string($x), ' '))"/>
										</xsl:if>
									</xsl:when>
									<xsl:otherwise>
										<xsl:if test="$var326_resultof_exists">
											<xsl:choose>
												<xsl:when test="$var38_resultof_exists">
													<xsl:variable name="var644_result" as="xs:string*">
														<xsl:if test="$var150_resultof_exists">
															<xsl:variable name="var643_resultof_map" as="node()*" select="$var5_resultof_map"/>
															<xsl:for-each select="((($var643_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var641_result" as="xs:string">
																	<xsl:choose>
																		<xsl:when test="$var43_resultof_exists">
																			<xsl:variable name="var633_resultof_map" as="node()*" select="$var5_resultof_map"/>
																			<xsl:variable name="var634_result" as="xs:string*">
																				<xsl:for-each select="((($var633_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																					<xsl:variable name="var632_current" as="node()" select="."/>
																					<xsl:variable name="var631_resultof_map" as="node()*" select="$var5_resultof_map"/>
																					<xsl:for-each select="((($var631_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																						<xsl:variable name="var625_resultof_map" as="xs:string*">
																							<xsl:for-each select="($var632_current/node())[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:variable name="var629_result" as="xs:string">
																							<xsl:choose>
																								<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var625_resultof_map return xs:string($x), ' ')), '@')">
																									<xsl:variable name="var626_resultof_map" as="xs:string*">
																										<xsl:for-each select="($var632_current/node())[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:variable name="var627_resultof_map" as="xs:string*">
																										<xsl:for-each select="($var632_current/node())[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var626_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var627_resultof_map return xs:string($x), ' ')), '@'))"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<xsl:variable name="var628_resultof_map" as="xs:string*">
																										<xsl:for-each select="($var632_current/node())[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:sequence select="xs:string(fn:string-join(for $x in $var628_resultof_map return xs:string($x), ' '))"/>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:variable>
																						<xsl:variable name="var630_resultof_map" as="xs:string*">
																							<xsl:for-each select="node()[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:sequence select="fn:concat(fn:concat($var629_result, ' / '), xs:string(fn:string-join(for $x in $var630_resultof_map return xs:string($x), ' ')))"/>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var634_result return xs:string($x), ' '))"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:variable name="var639_resultof_map" as="node()*" select="$var5_resultof_map"/>
																			<xsl:variable name="var640_result" as="xs:string*">
																				<xsl:for-each select="((($var639_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																					<xsl:variable name="var635_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var635_resultof_map return xs:string($x), ' ')), '@')">
																							<xsl:variable name="var636_resultof_map" as="xs:string*">
																								<xsl:for-each select="node()[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:variable name="var637_resultof_map" as="xs:string*">
																								<xsl:for-each select="node()[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var636_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var637_resultof_map return xs:string($x), ' ')), '@'))"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:variable name="var638_resultof_map" as="xs:string*">
																								<xsl:for-each select="node()[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="xs:string(fn:string-join(for $x in $var638_resultof_map return xs:string($x), ' '))"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var640_result return xs:string($x), ' '))"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:variable>
																<xsl:variable name="var642_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="fn:concat(fn:concat($var641_result, ' : '), xs:string(fn:string-join(for $x in $var642_resultof_map return xs:string($x), ' ')))"/>
															</xsl:for-each>
														</xsl:if>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var644_result return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:when test="$var43_resultof_exists">
													<xsl:variable name="var653_resultof_map" as="node()*" select="$var5_resultof_map"/>
													<xsl:variable name="var654_result" as="xs:string*">
														<xsl:for-each select="((($var653_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var652_current" as="node()" select="."/>
															<xsl:variable name="var651_resultof_map" as="node()*" select="$var5_resultof_map"/>
															<xsl:for-each select="((($var651_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var645_resultof_map" as="xs:string*">
																	<xsl:for-each select="($var652_current/node())[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:variable name="var649_result" as="xs:string">
																	<xsl:choose>
																		<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var645_resultof_map return xs:string($x), ' ')), '@')">
																			<xsl:variable name="var646_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var652_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:variable name="var647_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var652_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var646_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var647_resultof_map return xs:string($x), ' ')), '@'))"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:variable name="var648_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var652_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var648_resultof_map return xs:string($x), ' '))"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:variable>
																<xsl:variable name="var650_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="fn:concat(fn:concat($var649_result, ' / '), xs:string(fn:string-join(for $x in $var650_resultof_map return xs:string($x), ' ')))"/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var654_result return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="var659_resultof_map" as="node()*" select="$var5_resultof_map"/>
													<xsl:variable name="var660_result" as="xs:string*">
														<xsl:for-each select="((($var659_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var655_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:choose>
																<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var655_resultof_map return xs:string($x), ' ')), '@')">
																	<xsl:variable name="var656_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:variable name="var657_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var656_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var657_resultof_map return xs:string($x), ' ')), '@'))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="var658_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var658_resultof_map return xs:string($x), ' '))"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var660_result return xs:string($x), ' '))"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:if>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:if test="fn:exists($var661_result)">
								<title>
									<xsl:choose>
										<xsl:when test="$var33_resultof_exists">
											<xsl:variable name="var701_result" as="xs:string*">
												<xsl:if test="$var326_resultof_exists">
													<xsl:variable name="var700_resultof_map" as="node()*" select="$var5_resultof_map"/>
													<xsl:for-each select="((($var700_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'f')])[fn:exists(node()[fn:boolean(self::text())])]">
														<xsl:variable name="var698_result" as="xs:string">
															<xsl:choose>
																<xsl:when test="$var38_resultof_exists">
																	<xsl:variable name="var681_result" as="xs:string*">
																		<xsl:if test="$var150_resultof_exists">
																			<xsl:variable name="var680_resultof_map" as="node()*" select="$var5_resultof_map"/>
																			<xsl:for-each select="((($var680_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
																				<xsl:variable name="var678_result" as="xs:string">
																					<xsl:choose>
																						<xsl:when test="$var43_resultof_exists">
																							<xsl:variable name="var670_resultof_map" as="node()*" select="$var5_resultof_map"/>
																							<xsl:variable name="var671_result" as="xs:string*">
																								<xsl:for-each select="((($var670_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																									<xsl:variable name="var669_current" as="node()" select="."/>
																									<xsl:variable name="var668_resultof_map" as="node()*" select="$var5_resultof_map"/>
																									<xsl:for-each select="((($var668_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																										<xsl:variable name="var662_resultof_map" as="xs:string*">
																											<xsl:for-each select="($var669_current/node())[fn:boolean(self::text())]">
																												<xsl:sequence select="fn:string(.)"/>
																											</xsl:for-each>
																										</xsl:variable>
																										<xsl:variable name="var666_result" as="xs:string">
																											<xsl:choose>
																												<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var662_resultof_map return xs:string($x), ' ')), '@')">
																													<xsl:variable name="var663_resultof_map" as="xs:string*">
																														<xsl:for-each select="($var669_current/node())[fn:boolean(self::text())]">
																															<xsl:sequence select="fn:string(.)"/>
																														</xsl:for-each>
																													</xsl:variable>
																													<xsl:variable name="var664_resultof_map" as="xs:string*">
																														<xsl:for-each select="($var669_current/node())[fn:boolean(self::text())]">
																															<xsl:sequence select="fn:string(.)"/>
																														</xsl:for-each>
																													</xsl:variable>
																													<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var663_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var664_resultof_map return xs:string($x), ' ')), '@'))"/>
																												</xsl:when>
																												<xsl:otherwise>
																													<xsl:variable name="var665_resultof_map" as="xs:string*">
																														<xsl:for-each select="($var669_current/node())[fn:boolean(self::text())]">
																															<xsl:sequence select="fn:string(.)"/>
																														</xsl:for-each>
																													</xsl:variable>
																													<xsl:sequence select="xs:string(fn:string-join(for $x in $var665_resultof_map return xs:string($x), ' '))"/>
																												</xsl:otherwise>
																											</xsl:choose>
																										</xsl:variable>
																										<xsl:variable name="var667_resultof_map" as="xs:string*">
																											<xsl:for-each select="node()[fn:boolean(self::text())]">
																												<xsl:sequence select="fn:string(.)"/>
																											</xsl:for-each>
																										</xsl:variable>
																										<xsl:sequence select="fn:concat(fn:concat($var666_result, ' / '), xs:string(fn:string-join(for $x in $var667_resultof_map return xs:string($x), ' ')))"/>
																									</xsl:for-each>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="xs:string(fn:string-join(for $x in $var671_result return xs:string($x), ' '))"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:variable name="var676_resultof_map" as="node()*" select="$var5_resultof_map"/>
																							<xsl:variable name="var677_result" as="xs:string*">
																								<xsl:for-each select="((($var676_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																									<xsl:variable name="var672_resultof_map" as="xs:string*">
																										<xsl:for-each select="node()[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var672_resultof_map return xs:string($x), ' ')), '@')">
																											<xsl:variable name="var673_resultof_map" as="xs:string*">
																												<xsl:for-each select="node()[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:variable name="var674_resultof_map" as="xs:string*">
																												<xsl:for-each select="node()[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var673_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var674_resultof_map return xs:string($x), ' ')), '@'))"/>
																										</xsl:when>
																										<xsl:otherwise>
																											<xsl:variable name="var675_resultof_map" as="xs:string*">
																												<xsl:for-each select="node()[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:sequence select="xs:string(fn:string-join(for $x in $var675_resultof_map return xs:string($x), ' '))"/>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="xs:string(fn:string-join(for $x in $var677_result return xs:string($x), ' '))"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:variable>
																				<xsl:variable name="var679_resultof_map" as="xs:string*">
																					<xsl:for-each select="node()[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="fn:concat(fn:concat($var678_result, ' : '), xs:string(fn:string-join(for $x in $var679_resultof_map return xs:string($x), ' ')))"/>
																			</xsl:for-each>
																		</xsl:if>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var681_result return xs:string($x), ' '))"/>
																</xsl:when>
																<xsl:when test="$var43_resultof_exists">
																	<xsl:variable name="var690_resultof_map" as="node()*" select="$var5_resultof_map"/>
																	<xsl:variable name="var691_result" as="xs:string*">
																		<xsl:for-each select="((($var690_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																			<xsl:variable name="var689_current" as="node()" select="."/>
																			<xsl:variable name="var688_resultof_map" as="node()*" select="$var5_resultof_map"/>
																			<xsl:for-each select="((($var688_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																				<xsl:variable name="var682_resultof_map" as="xs:string*">
																					<xsl:for-each select="($var689_current/node())[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:variable name="var686_result" as="xs:string">
																					<xsl:choose>
																						<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var682_resultof_map return xs:string($x), ' ')), '@')">
																							<xsl:variable name="var683_resultof_map" as="xs:string*">
																								<xsl:for-each select="($var689_current/node())[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:variable name="var684_resultof_map" as="xs:string*">
																								<xsl:for-each select="($var689_current/node())[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var683_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var684_resultof_map return xs:string($x), ' ')), '@'))"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:variable name="var685_resultof_map" as="xs:string*">
																								<xsl:for-each select="($var689_current/node())[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="xs:string(fn:string-join(for $x in $var685_resultof_map return xs:string($x), ' '))"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:variable>
																				<xsl:variable name="var687_resultof_map" as="xs:string*">
																					<xsl:for-each select="node()[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="fn:concat(fn:concat($var686_result, ' / '), xs:string(fn:string-join(for $x in $var687_resultof_map return xs:string($x), ' ')))"/>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var691_result return xs:string($x), ' '))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="var696_resultof_map" as="node()*" select="$var5_resultof_map"/>
																	<xsl:variable name="var697_result" as="xs:string*">
																		<xsl:for-each select="((($var696_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																			<xsl:variable name="var692_resultof_map" as="xs:string*">
																				<xsl:for-each select="node()[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var692_resultof_map return xs:string($x), ' ')), '@')">
																					<xsl:variable name="var693_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:variable name="var694_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var693_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var694_resultof_map return xs:string($x), ' ')), '@'))"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:variable name="var695_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="xs:string(fn:string-join(for $x in $var695_resultof_map return xs:string($x), ' '))"/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var697_result return xs:string($x), ' '))"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:variable>
														<xsl:variable name="var699_resultof_map" as="xs:string*">
															<xsl:for-each select="node()[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="fn:concat(fn:concat($var698_result, ' = '), xs:string(fn:string-join(for $x in $var699_resultof_map return xs:string($x), ' ')))"/>
													</xsl:for-each>
												</xsl:if>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var701_result return xs:string($x), ' '))"/>
										</xsl:when>
										<xsl:when test="$var38_resultof_exists">
											<xsl:variable name="var721_result" as="xs:string*">
												<xsl:if test="$var150_resultof_exists">
													<xsl:variable name="var720_resultof_map" as="node()*" select="$var5_resultof_map"/>
													<xsl:for-each select="((($var720_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
														<xsl:variable name="var718_result" as="xs:string">
															<xsl:choose>
																<xsl:when test="$var43_resultof_exists">
																	<xsl:variable name="var710_resultof_map" as="node()*" select="$var5_resultof_map"/>
																	<xsl:variable name="var711_result" as="xs:string*">
																		<xsl:for-each select="((($var710_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																			<xsl:variable name="var709_current" as="node()" select="."/>
																			<xsl:variable name="var708_resultof_map" as="node()*" select="$var5_resultof_map"/>
																			<xsl:for-each select="((($var708_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																				<xsl:variable name="var702_resultof_map" as="xs:string*">
																					<xsl:for-each select="($var709_current/node())[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:variable name="var706_result" as="xs:string">
																					<xsl:choose>
																						<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var702_resultof_map return xs:string($x), ' ')), '@')">
																							<xsl:variable name="var703_resultof_map" as="xs:string*">
																								<xsl:for-each select="($var709_current/node())[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:variable name="var704_resultof_map" as="xs:string*">
																								<xsl:for-each select="($var709_current/node())[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var703_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var704_resultof_map return xs:string($x), ' ')), '@'))"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:variable name="var705_resultof_map" as="xs:string*">
																								<xsl:for-each select="($var709_current/node())[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="xs:string(fn:string-join(for $x in $var705_resultof_map return xs:string($x), ' '))"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:variable>
																				<xsl:variable name="var707_resultof_map" as="xs:string*">
																					<xsl:for-each select="node()[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="fn:concat(fn:concat($var706_result, ' / '), xs:string(fn:string-join(for $x in $var707_resultof_map return xs:string($x), ' ')))"/>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var711_result return xs:string($x), ' '))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="var716_resultof_map" as="node()*" select="$var5_resultof_map"/>
																	<xsl:variable name="var717_result" as="xs:string*">
																		<xsl:for-each select="((($var716_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																			<xsl:variable name="var712_resultof_map" as="xs:string*">
																				<xsl:for-each select="node()[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var712_resultof_map return xs:string($x), ' ')), '@')">
																					<xsl:variable name="var713_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:variable name="var714_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var713_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var714_resultof_map return xs:string($x), ' ')), '@'))"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:variable name="var715_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="xs:string(fn:string-join(for $x in $var715_resultof_map return xs:string($x), ' '))"/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var717_result return xs:string($x), ' '))"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:variable>
														<xsl:variable name="var719_resultof_map" as="xs:string*">
															<xsl:for-each select="node()[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="fn:concat(fn:concat($var718_result, ' : '), xs:string(fn:string-join(for $x in $var719_resultof_map return xs:string($x), ' ')))"/>
													</xsl:for-each>
												</xsl:if>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var721_result return xs:string($x), ' '))"/>
										</xsl:when>
										<xsl:when test="$var43_resultof_exists">
											<xsl:variable name="var730_resultof_map" as="node()*" select="$var5_resultof_map"/>
											<xsl:variable name="var731_result" as="xs:string*">
												<xsl:for-each select="((($var730_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
													<xsl:variable name="var729_current" as="node()" select="."/>
													<xsl:variable name="var728_resultof_map" as="node()*" select="$var5_resultof_map"/>
													<xsl:for-each select="((($var728_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
														<xsl:variable name="var722_resultof_map" as="xs:string*">
															<xsl:for-each select="($var729_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:variable name="var726_result" as="xs:string">
															<xsl:choose>
																<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var722_resultof_map return xs:string($x), ' ')), '@')">
																	<xsl:variable name="var723_resultof_map" as="xs:string*">
																		<xsl:for-each select="($var729_current/node())[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:variable name="var724_resultof_map" as="xs:string*">
																		<xsl:for-each select="($var729_current/node())[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var723_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var724_resultof_map return xs:string($x), ' ')), '@'))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="var725_resultof_map" as="xs:string*">
																		<xsl:for-each select="($var729_current/node())[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var725_resultof_map return xs:string($x), ' '))"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:variable>
														<xsl:variable name="var727_resultof_map" as="xs:string*">
															<xsl:for-each select="node()[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="fn:concat(fn:concat($var726_result, ' / '), xs:string(fn:string-join(for $x in $var727_resultof_map return xs:string($x), ' ')))"/>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var731_result return xs:string($x), ' '))"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="var736_resultof_map" as="node()*" select="$var5_resultof_map"/>
											<xsl:variable name="var737_result" as="xs:string*">
												<xsl:for-each select="((($var736_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
													<xsl:variable name="var732_resultof_map" as="xs:string*">
														<xsl:for-each select="node()[fn:boolean(self::text())]">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:choose>
														<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var732_resultof_map return xs:string($x), ' ')), '@')">
															<xsl:variable name="var733_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:variable name="var734_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var733_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var734_resultof_map return xs:string($x), ' ')), '@'))"/>
														</xsl:when>
														<xsl:otherwise>
															<xsl:variable name="var735_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="xs:string(fn:string-join(for $x in $var735_resultof_map return xs:string($x), ' '))"/>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var737_result return xs:string($x), ' '))"/>
										</xsl:otherwise>
									</xsl:choose>
								</title>
							</xsl:if>
							<xsl:variable name="var855_result" as="xs:string?">
								<xsl:choose>
									<xsl:when test="$var37_resultof_exists">
										<xsl:variable name="var818_result" as="xs:boolean">
											<xsl:choose>
												<xsl:when test="$var328_resultof_exists">
													<xsl:variable name="var776_resultof_map" as="node()*" select="$var6_resultof_map"/>
													<xsl:variable name="var777_result" as="xs:string*">
														<xsl:for-each select="((($var776_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'f')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var774_result" as="xs:string">
																<xsl:choose>
																	<xsl:when test="$var44_resultof_exists">
																		<xsl:variable name="var757_result" as="xs:string*">
																			<xsl:if test="$var151_resultof_exists">
																				<xsl:variable name="var756_resultof_map" as="node()*" select="$var6_resultof_map"/>
																				<xsl:for-each select="((($var756_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
																					<xsl:variable name="var754_result" as="xs:string">
																						<xsl:choose>
																							<xsl:when test="$var29_resultof_exists">
																								<xsl:variable name="var746_resultof_map" as="node()*" select="$var6_resultof_map"/>
																								<xsl:variable name="var747_result" as="xs:string*">
																									<xsl:for-each select="((($var746_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																										<xsl:variable name="var745_current" as="node()" select="."/>
																										<xsl:variable name="var744_resultof_map" as="node()*" select="$var6_resultof_map"/>
																										<xsl:for-each select="((($var744_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																											<xsl:variable name="var738_resultof_map" as="xs:string*">
																												<xsl:for-each select="($var745_current/node())[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:variable name="var742_result" as="xs:string">
																												<xsl:choose>
																													<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var738_resultof_map return xs:string($x), ' ')), '@')">
																														<xsl:variable name="var739_resultof_map" as="xs:string*">
																															<xsl:for-each select="($var745_current/node())[fn:boolean(self::text())]">
																																<xsl:sequence select="fn:string(.)"/>
																															</xsl:for-each>
																														</xsl:variable>
																														<xsl:variable name="var740_resultof_map" as="xs:string*">
																															<xsl:for-each select="($var745_current/node())[fn:boolean(self::text())]">
																																<xsl:sequence select="fn:string(.)"/>
																															</xsl:for-each>
																														</xsl:variable>
																														<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var739_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var740_resultof_map return xs:string($x), ' ')), '@'))"/>
																													</xsl:when>
																													<xsl:otherwise>
																														<xsl:variable name="var741_resultof_map" as="xs:string*">
																															<xsl:for-each select="($var745_current/node())[fn:boolean(self::text())]">
																																<xsl:sequence select="fn:string(.)"/>
																															</xsl:for-each>
																														</xsl:variable>
																														<xsl:sequence select="xs:string(fn:string-join(for $x in $var741_resultof_map return xs:string($x), ' '))"/>
																													</xsl:otherwise>
																												</xsl:choose>
																											</xsl:variable>
																											<xsl:variable name="var743_resultof_map" as="xs:string*">
																												<xsl:for-each select="node()[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:sequence select="fn:concat(fn:concat($var742_result, ' / '), xs:string(fn:string-join(for $x in $var743_resultof_map return xs:string($x), ' ')))"/>
																										</xsl:for-each>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:sequence select="xs:string(fn:string-join(for $x in $var747_result return xs:string($x), ' '))"/>
																							</xsl:when>
																							<xsl:otherwise>
																								<xsl:variable name="var752_resultof_map" as="node()*" select="$var6_resultof_map"/>
																								<xsl:variable name="var753_result" as="xs:string*">
																									<xsl:for-each select="((($var752_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																										<xsl:variable name="var748_resultof_map" as="xs:string*">
																											<xsl:for-each select="node()[fn:boolean(self::text())]">
																												<xsl:sequence select="fn:string(.)"/>
																											</xsl:for-each>
																										</xsl:variable>
																										<xsl:choose>
																											<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var748_resultof_map return xs:string($x), ' ')), '@')">
																												<xsl:variable name="var749_resultof_map" as="xs:string*">
																													<xsl:for-each select="node()[fn:boolean(self::text())]">
																														<xsl:sequence select="fn:string(.)"/>
																													</xsl:for-each>
																												</xsl:variable>
																												<xsl:variable name="var750_resultof_map" as="xs:string*">
																													<xsl:for-each select="node()[fn:boolean(self::text())]">
																														<xsl:sequence select="fn:string(.)"/>
																													</xsl:for-each>
																												</xsl:variable>
																												<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var749_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var750_resultof_map return xs:string($x), ' ')), '@'))"/>
																											</xsl:when>
																											<xsl:otherwise>
																												<xsl:variable name="var751_resultof_map" as="xs:string*">
																													<xsl:for-each select="node()[fn:boolean(self::text())]">
																														<xsl:sequence select="fn:string(.)"/>
																													</xsl:for-each>
																												</xsl:variable>
																												<xsl:sequence select="xs:string(fn:string-join(for $x in $var751_resultof_map return xs:string($x), ' '))"/>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:sequence select="xs:string(fn:string-join(for $x in $var753_result return xs:string($x), ' '))"/>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:variable>
																					<xsl:variable name="var755_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="fn:concat(fn:concat($var754_result, ' : '), xs:string(fn:string-join(for $x in $var755_resultof_map return xs:string($x), ' ')))"/>
																				</xsl:for-each>
																			</xsl:if>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var757_result return xs:string($x), ' '))"/>
																	</xsl:when>
																	<xsl:when test="$var29_resultof_exists">
																		<xsl:variable name="var766_resultof_map" as="node()*" select="$var6_resultof_map"/>
																		<xsl:variable name="var767_result" as="xs:string*">
																			<xsl:for-each select="((($var766_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																				<xsl:variable name="var765_current" as="node()" select="."/>
																				<xsl:variable name="var764_resultof_map" as="node()*" select="$var6_resultof_map"/>
																				<xsl:for-each select="((($var764_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																					<xsl:variable name="var758_resultof_map" as="xs:string*">
																						<xsl:for-each select="($var765_current/node())[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:variable name="var762_result" as="xs:string">
																						<xsl:choose>
																							<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var758_resultof_map return xs:string($x), ' ')), '@')">
																								<xsl:variable name="var759_resultof_map" as="xs:string*">
																									<xsl:for-each select="($var765_current/node())[fn:boolean(self::text())]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:variable name="var760_resultof_map" as="xs:string*">
																									<xsl:for-each select="($var765_current/node())[fn:boolean(self::text())]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var759_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var760_resultof_map return xs:string($x), ' ')), '@'))"/>
																							</xsl:when>
																							<xsl:otherwise>
																								<xsl:variable name="var761_resultof_map" as="xs:string*">
																									<xsl:for-each select="($var765_current/node())[fn:boolean(self::text())]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:sequence select="xs:string(fn:string-join(for $x in $var761_resultof_map return xs:string($x), ' '))"/>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:variable>
																					<xsl:variable name="var763_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="fn:concat(fn:concat($var762_result, ' / '), xs:string(fn:string-join(for $x in $var763_resultof_map return xs:string($x), ' ')))"/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var767_result return xs:string($x), ' '))"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:variable name="var772_resultof_map" as="node()*" select="$var6_resultof_map"/>
																		<xsl:variable name="var773_result" as="xs:string*">
																			<xsl:for-each select="((($var772_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																				<xsl:variable name="var768_resultof_map" as="xs:string*">
																					<xsl:for-each select="node()[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var768_resultof_map return xs:string($x), ' ')), '@')">
																						<xsl:variable name="var769_resultof_map" as="xs:string*">
																							<xsl:for-each select="node()[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:variable name="var770_resultof_map" as="xs:string*">
																							<xsl:for-each select="node()[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var769_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var770_resultof_map return xs:string($x), ' ')), '@'))"/>
																					</xsl:when>
																					<xsl:otherwise>
																						<xsl:variable name="var771_resultof_map" as="xs:string*">
																							<xsl:for-each select="node()[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:sequence select="xs:string(fn:string-join(for $x in $var771_resultof_map return xs:string($x), ' '))"/>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var773_result return xs:string($x), ' '))"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:variable>
															<xsl:variable name="var775_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="fn:concat(fn:concat($var774_result, ' = '), xs:string(fn:string-join(for $x in $var775_resultof_map return xs:string($x), ' ')))"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="fn:exists($var777_result)"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:sequence select="fn:false()"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:if test="$var818_result">
											<xsl:variable name="var817_result" as="xs:string*">
												<xsl:if test="$var328_resultof_exists">
													<xsl:variable name="var816_resultof_map" as="node()*" select="$var6_resultof_map"/>
													<xsl:for-each select="((($var816_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'f')])[fn:exists(node()[fn:boolean(self::text())])]">
														<xsl:variable name="var814_result" as="xs:string">
															<xsl:choose>
																<xsl:when test="$var44_resultof_exists">
																	<xsl:variable name="var797_result" as="xs:string*">
																		<xsl:if test="$var151_resultof_exists">
																			<xsl:variable name="var796_resultof_map" as="node()*" select="$var6_resultof_map"/>
																			<xsl:for-each select="((($var796_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
																				<xsl:variable name="var794_result" as="xs:string">
																					<xsl:choose>
																						<xsl:when test="$var29_resultof_exists">
																							<xsl:variable name="var786_resultof_map" as="node()*" select="$var6_resultof_map"/>
																							<xsl:variable name="var787_result" as="xs:string*">
																								<xsl:for-each select="((($var786_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																									<xsl:variable name="var785_current" as="node()" select="."/>
																									<xsl:variable name="var784_resultof_map" as="node()*" select="$var6_resultof_map"/>
																									<xsl:for-each select="((($var784_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																										<xsl:variable name="var778_resultof_map" as="xs:string*">
																											<xsl:for-each select="($var785_current/node())[fn:boolean(self::text())]">
																												<xsl:sequence select="fn:string(.)"/>
																											</xsl:for-each>
																										</xsl:variable>
																										<xsl:variable name="var782_result" as="xs:string">
																											<xsl:choose>
																												<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var778_resultof_map return xs:string($x), ' ')), '@')">
																													<xsl:variable name="var779_resultof_map" as="xs:string*">
																														<xsl:for-each select="($var785_current/node())[fn:boolean(self::text())]">
																															<xsl:sequence select="fn:string(.)"/>
																														</xsl:for-each>
																													</xsl:variable>
																													<xsl:variable name="var780_resultof_map" as="xs:string*">
																														<xsl:for-each select="($var785_current/node())[fn:boolean(self::text())]">
																															<xsl:sequence select="fn:string(.)"/>
																														</xsl:for-each>
																													</xsl:variable>
																													<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var779_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var780_resultof_map return xs:string($x), ' ')), '@'))"/>
																												</xsl:when>
																												<xsl:otherwise>
																													<xsl:variable name="var781_resultof_map" as="xs:string*">
																														<xsl:for-each select="($var785_current/node())[fn:boolean(self::text())]">
																															<xsl:sequence select="fn:string(.)"/>
																														</xsl:for-each>
																													</xsl:variable>
																													<xsl:sequence select="xs:string(fn:string-join(for $x in $var781_resultof_map return xs:string($x), ' '))"/>
																												</xsl:otherwise>
																											</xsl:choose>
																										</xsl:variable>
																										<xsl:variable name="var783_resultof_map" as="xs:string*">
																											<xsl:for-each select="node()[fn:boolean(self::text())]">
																												<xsl:sequence select="fn:string(.)"/>
																											</xsl:for-each>
																										</xsl:variable>
																										<xsl:sequence select="fn:concat(fn:concat($var782_result, ' / '), xs:string(fn:string-join(for $x in $var783_resultof_map return xs:string($x), ' ')))"/>
																									</xsl:for-each>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="xs:string(fn:string-join(for $x in $var787_result return xs:string($x), ' '))"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:variable name="var792_resultof_map" as="node()*" select="$var6_resultof_map"/>
																							<xsl:variable name="var793_result" as="xs:string*">
																								<xsl:for-each select="((($var792_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																									<xsl:variable name="var788_resultof_map" as="xs:string*">
																										<xsl:for-each select="node()[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var788_resultof_map return xs:string($x), ' ')), '@')">
																											<xsl:variable name="var789_resultof_map" as="xs:string*">
																												<xsl:for-each select="node()[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:variable name="var790_resultof_map" as="xs:string*">
																												<xsl:for-each select="node()[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var789_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var790_resultof_map return xs:string($x), ' ')), '@'))"/>
																										</xsl:when>
																										<xsl:otherwise>
																											<xsl:variable name="var791_resultof_map" as="xs:string*">
																												<xsl:for-each select="node()[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:sequence select="xs:string(fn:string-join(for $x in $var791_resultof_map return xs:string($x), ' '))"/>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="xs:string(fn:string-join(for $x in $var793_result return xs:string($x), ' '))"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:variable>
																				<xsl:variable name="var795_resultof_map" as="xs:string*">
																					<xsl:for-each select="node()[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="fn:concat(fn:concat($var794_result, ' : '), xs:string(fn:string-join(for $x in $var795_resultof_map return xs:string($x), ' ')))"/>
																			</xsl:for-each>
																		</xsl:if>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var797_result return xs:string($x), ' '))"/>
																</xsl:when>
																<xsl:when test="$var29_resultof_exists">
																	<xsl:variable name="var806_resultof_map" as="node()*" select="$var6_resultof_map"/>
																	<xsl:variable name="var807_result" as="xs:string*">
																		<xsl:for-each select="((($var806_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																			<xsl:variable name="var805_current" as="node()" select="."/>
																			<xsl:variable name="var804_resultof_map" as="node()*" select="$var6_resultof_map"/>
																			<xsl:for-each select="((($var804_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																				<xsl:variable name="var798_resultof_map" as="xs:string*">
																					<xsl:for-each select="($var805_current/node())[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:variable name="var802_result" as="xs:string">
																					<xsl:choose>
																						<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var798_resultof_map return xs:string($x), ' ')), '@')">
																							<xsl:variable name="var799_resultof_map" as="xs:string*">
																								<xsl:for-each select="($var805_current/node())[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:variable name="var800_resultof_map" as="xs:string*">
																								<xsl:for-each select="($var805_current/node())[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var799_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var800_resultof_map return xs:string($x), ' ')), '@'))"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:variable name="var801_resultof_map" as="xs:string*">
																								<xsl:for-each select="($var805_current/node())[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="xs:string(fn:string-join(for $x in $var801_resultof_map return xs:string($x), ' '))"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:variable>
																				<xsl:variable name="var803_resultof_map" as="xs:string*">
																					<xsl:for-each select="node()[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="fn:concat(fn:concat($var802_result, ' / '), xs:string(fn:string-join(for $x in $var803_resultof_map return xs:string($x), ' ')))"/>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var807_result return xs:string($x), ' '))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="var812_resultof_map" as="node()*" select="$var6_resultof_map"/>
																	<xsl:variable name="var813_result" as="xs:string*">
																		<xsl:for-each select="((($var812_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																			<xsl:variable name="var808_resultof_map" as="xs:string*">
																				<xsl:for-each select="node()[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var808_resultof_map return xs:string($x), ' ')), '@')">
																					<xsl:variable name="var809_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:variable name="var810_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var809_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var810_resultof_map return xs:string($x), ' ')), '@'))"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:variable name="var811_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="xs:string(fn:string-join(for $x in $var811_resultof_map return xs:string($x), ' '))"/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var813_result return xs:string($x), ' '))"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:variable>
														<xsl:variable name="var815_resultof_map" as="xs:string*">
															<xsl:for-each select="node()[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="fn:concat(fn:concat($var814_result, ' = '), xs:string(fn:string-join(for $x in $var815_resultof_map return xs:string($x), ' ')))"/>
													</xsl:for-each>
												</xsl:if>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var817_result return xs:string($x), ' '))"/>
										</xsl:if>
									</xsl:when>
									<xsl:otherwise>
										<xsl:if test="$var328_resultof_exists">
											<xsl:choose>
												<xsl:when test="$var44_resultof_exists">
													<xsl:variable name="var838_result" as="xs:string*">
														<xsl:if test="$var151_resultof_exists">
															<xsl:variable name="var837_resultof_map" as="node()*" select="$var6_resultof_map"/>
															<xsl:for-each select="((($var837_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var835_result" as="xs:string">
																	<xsl:choose>
																		<xsl:when test="$var29_resultof_exists">
																			<xsl:variable name="var827_resultof_map" as="node()*" select="$var6_resultof_map"/>
																			<xsl:variable name="var828_result" as="xs:string*">
																				<xsl:for-each select="((($var827_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																					<xsl:variable name="var826_current" as="node()" select="."/>
																					<xsl:variable name="var825_resultof_map" as="node()*" select="$var6_resultof_map"/>
																					<xsl:for-each select="((($var825_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																						<xsl:variable name="var819_resultof_map" as="xs:string*">
																							<xsl:for-each select="($var826_current/node())[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:variable name="var823_result" as="xs:string">
																							<xsl:choose>
																								<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var819_resultof_map return xs:string($x), ' ')), '@')">
																									<xsl:variable name="var820_resultof_map" as="xs:string*">
																										<xsl:for-each select="($var826_current/node())[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:variable name="var821_resultof_map" as="xs:string*">
																										<xsl:for-each select="($var826_current/node())[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var820_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var821_resultof_map return xs:string($x), ' ')), '@'))"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<xsl:variable name="var822_resultof_map" as="xs:string*">
																										<xsl:for-each select="($var826_current/node())[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:sequence select="xs:string(fn:string-join(for $x in $var822_resultof_map return xs:string($x), ' '))"/>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:variable>
																						<xsl:variable name="var824_resultof_map" as="xs:string*">
																							<xsl:for-each select="node()[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:sequence select="fn:concat(fn:concat($var823_result, ' / '), xs:string(fn:string-join(for $x in $var824_resultof_map return xs:string($x), ' ')))"/>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var828_result return xs:string($x), ' '))"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:variable name="var833_resultof_map" as="node()*" select="$var6_resultof_map"/>
																			<xsl:variable name="var834_result" as="xs:string*">
																				<xsl:for-each select="((($var833_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																					<xsl:variable name="var829_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var829_resultof_map return xs:string($x), ' ')), '@')">
																							<xsl:variable name="var830_resultof_map" as="xs:string*">
																								<xsl:for-each select="node()[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:variable name="var831_resultof_map" as="xs:string*">
																								<xsl:for-each select="node()[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var830_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var831_resultof_map return xs:string($x), ' ')), '@'))"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:variable name="var832_resultof_map" as="xs:string*">
																								<xsl:for-each select="node()[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="xs:string(fn:string-join(for $x in $var832_resultof_map return xs:string($x), ' '))"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var834_result return xs:string($x), ' '))"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:variable>
																<xsl:variable name="var836_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="fn:concat(fn:concat($var835_result, ' : '), xs:string(fn:string-join(for $x in $var836_resultof_map return xs:string($x), ' ')))"/>
															</xsl:for-each>
														</xsl:if>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var838_result return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:when test="$var29_resultof_exists">
													<xsl:variable name="var847_resultof_map" as="node()*" select="$var6_resultof_map"/>
													<xsl:variable name="var848_result" as="xs:string*">
														<xsl:for-each select="((($var847_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var846_current" as="node()" select="."/>
															<xsl:variable name="var845_resultof_map" as="node()*" select="$var6_resultof_map"/>
															<xsl:for-each select="((($var845_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var839_resultof_map" as="xs:string*">
																	<xsl:for-each select="($var846_current/node())[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:variable name="var843_result" as="xs:string">
																	<xsl:choose>
																		<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var839_resultof_map return xs:string($x), ' ')), '@')">
																			<xsl:variable name="var840_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var846_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:variable name="var841_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var846_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var840_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var841_resultof_map return xs:string($x), ' ')), '@'))"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:variable name="var842_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var846_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var842_resultof_map return xs:string($x), ' '))"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:variable>
																<xsl:variable name="var844_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="fn:concat(fn:concat($var843_result, ' / '), xs:string(fn:string-join(for $x in $var844_resultof_map return xs:string($x), ' ')))"/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var848_result return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="var853_resultof_map" as="node()*" select="$var6_resultof_map"/>
													<xsl:variable name="var854_result" as="xs:string*">
														<xsl:for-each select="((($var853_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var849_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:choose>
																<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var849_resultof_map return xs:string($x), ' ')), '@')">
																	<xsl:variable name="var850_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:variable name="var851_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var850_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var851_resultof_map return xs:string($x), ' ')), '@'))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="var852_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var852_resultof_map return xs:string($x), ' '))"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var854_result return xs:string($x), ' '))"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:if>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:if test="fn:exists($var855_result)">
								<title>
									<xsl:choose>
										<xsl:when test="$var37_resultof_exists">
											<xsl:variable name="var895_result" as="xs:string*">
												<xsl:if test="$var328_resultof_exists">
													<xsl:variable name="var894_resultof_map" as="node()*" select="$var6_resultof_map"/>
													<xsl:for-each select="((($var894_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'f')])[fn:exists(node()[fn:boolean(self::text())])]">
														<xsl:variable name="var892_result" as="xs:string">
															<xsl:choose>
																<xsl:when test="$var44_resultof_exists">
																	<xsl:variable name="var875_result" as="xs:string*">
																		<xsl:if test="$var151_resultof_exists">
																			<xsl:variable name="var874_resultof_map" as="node()*" select="$var6_resultof_map"/>
																			<xsl:for-each select="((($var874_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
																				<xsl:variable name="var872_result" as="xs:string">
																					<xsl:choose>
																						<xsl:when test="$var29_resultof_exists">
																							<xsl:variable name="var864_resultof_map" as="node()*" select="$var6_resultof_map"/>
																							<xsl:variable name="var865_result" as="xs:string*">
																								<xsl:for-each select="((($var864_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																									<xsl:variable name="var863_current" as="node()" select="."/>
																									<xsl:variable name="var862_resultof_map" as="node()*" select="$var6_resultof_map"/>
																									<xsl:for-each select="((($var862_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																										<xsl:variable name="var856_resultof_map" as="xs:string*">
																											<xsl:for-each select="($var863_current/node())[fn:boolean(self::text())]">
																												<xsl:sequence select="fn:string(.)"/>
																											</xsl:for-each>
																										</xsl:variable>
																										<xsl:variable name="var860_result" as="xs:string">
																											<xsl:choose>
																												<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var856_resultof_map return xs:string($x), ' ')), '@')">
																													<xsl:variable name="var857_resultof_map" as="xs:string*">
																														<xsl:for-each select="($var863_current/node())[fn:boolean(self::text())]">
																															<xsl:sequence select="fn:string(.)"/>
																														</xsl:for-each>
																													</xsl:variable>
																													<xsl:variable name="var858_resultof_map" as="xs:string*">
																														<xsl:for-each select="($var863_current/node())[fn:boolean(self::text())]">
																															<xsl:sequence select="fn:string(.)"/>
																														</xsl:for-each>
																													</xsl:variable>
																													<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var857_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var858_resultof_map return xs:string($x), ' ')), '@'))"/>
																												</xsl:when>
																												<xsl:otherwise>
																													<xsl:variable name="var859_resultof_map" as="xs:string*">
																														<xsl:for-each select="($var863_current/node())[fn:boolean(self::text())]">
																															<xsl:sequence select="fn:string(.)"/>
																														</xsl:for-each>
																													</xsl:variable>
																													<xsl:sequence select="xs:string(fn:string-join(for $x in $var859_resultof_map return xs:string($x), ' '))"/>
																												</xsl:otherwise>
																											</xsl:choose>
																										</xsl:variable>
																										<xsl:variable name="var861_resultof_map" as="xs:string*">
																											<xsl:for-each select="node()[fn:boolean(self::text())]">
																												<xsl:sequence select="fn:string(.)"/>
																											</xsl:for-each>
																										</xsl:variable>
																										<xsl:sequence select="fn:concat(fn:concat($var860_result, ' / '), xs:string(fn:string-join(for $x in $var861_resultof_map return xs:string($x), ' ')))"/>
																									</xsl:for-each>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="xs:string(fn:string-join(for $x in $var865_result return xs:string($x), ' '))"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:variable name="var870_resultof_map" as="node()*" select="$var6_resultof_map"/>
																							<xsl:variable name="var871_result" as="xs:string*">
																								<xsl:for-each select="((($var870_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																									<xsl:variable name="var866_resultof_map" as="xs:string*">
																										<xsl:for-each select="node()[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var866_resultof_map return xs:string($x), ' ')), '@')">
																											<xsl:variable name="var867_resultof_map" as="xs:string*">
																												<xsl:for-each select="node()[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:variable name="var868_resultof_map" as="xs:string*">
																												<xsl:for-each select="node()[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var867_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var868_resultof_map return xs:string($x), ' ')), '@'))"/>
																										</xsl:when>
																										<xsl:otherwise>
																											<xsl:variable name="var869_resultof_map" as="xs:string*">
																												<xsl:for-each select="node()[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:sequence select="xs:string(fn:string-join(for $x in $var869_resultof_map return xs:string($x), ' '))"/>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="xs:string(fn:string-join(for $x in $var871_result return xs:string($x), ' '))"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:variable>
																				<xsl:variable name="var873_resultof_map" as="xs:string*">
																					<xsl:for-each select="node()[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="fn:concat(fn:concat($var872_result, ' : '), xs:string(fn:string-join(for $x in $var873_resultof_map return xs:string($x), ' ')))"/>
																			</xsl:for-each>
																		</xsl:if>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var875_result return xs:string($x), ' '))"/>
																</xsl:when>
																<xsl:when test="$var29_resultof_exists">
																	<xsl:variable name="var884_resultof_map" as="node()*" select="$var6_resultof_map"/>
																	<xsl:variable name="var885_result" as="xs:string*">
																		<xsl:for-each select="((($var884_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																			<xsl:variable name="var883_current" as="node()" select="."/>
																			<xsl:variable name="var882_resultof_map" as="node()*" select="$var6_resultof_map"/>
																			<xsl:for-each select="((($var882_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																				<xsl:variable name="var876_resultof_map" as="xs:string*">
																					<xsl:for-each select="($var883_current/node())[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:variable name="var880_result" as="xs:string">
																					<xsl:choose>
																						<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var876_resultof_map return xs:string($x), ' ')), '@')">
																							<xsl:variable name="var877_resultof_map" as="xs:string*">
																								<xsl:for-each select="($var883_current/node())[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:variable name="var878_resultof_map" as="xs:string*">
																								<xsl:for-each select="($var883_current/node())[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var877_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var878_resultof_map return xs:string($x), ' ')), '@'))"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:variable name="var879_resultof_map" as="xs:string*">
																								<xsl:for-each select="($var883_current/node())[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="xs:string(fn:string-join(for $x in $var879_resultof_map return xs:string($x), ' '))"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:variable>
																				<xsl:variable name="var881_resultof_map" as="xs:string*">
																					<xsl:for-each select="node()[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="fn:concat(fn:concat($var880_result, ' / '), xs:string(fn:string-join(for $x in $var881_resultof_map return xs:string($x), ' ')))"/>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var885_result return xs:string($x), ' '))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="var890_resultof_map" as="node()*" select="$var6_resultof_map"/>
																	<xsl:variable name="var891_result" as="xs:string*">
																		<xsl:for-each select="((($var890_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																			<xsl:variable name="var886_resultof_map" as="xs:string*">
																				<xsl:for-each select="node()[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var886_resultof_map return xs:string($x), ' ')), '@')">
																					<xsl:variable name="var887_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:variable name="var888_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var887_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var888_resultof_map return xs:string($x), ' ')), '@'))"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:variable name="var889_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="xs:string(fn:string-join(for $x in $var889_resultof_map return xs:string($x), ' '))"/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var891_result return xs:string($x), ' '))"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:variable>
														<xsl:variable name="var893_resultof_map" as="xs:string*">
															<xsl:for-each select="node()[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="fn:concat(fn:concat($var892_result, ' = '), xs:string(fn:string-join(for $x in $var893_resultof_map return xs:string($x), ' ')))"/>
													</xsl:for-each>
												</xsl:if>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var895_result return xs:string($x), ' '))"/>
										</xsl:when>
										<xsl:when test="$var44_resultof_exists">
											<xsl:variable name="var915_result" as="xs:string*">
												<xsl:if test="$var151_resultof_exists">
													<xsl:variable name="var914_resultof_map" as="node()*" select="$var6_resultof_map"/>
													<xsl:for-each select="((($var914_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
														<xsl:variable name="var912_result" as="xs:string">
															<xsl:choose>
																<xsl:when test="$var29_resultof_exists">
																	<xsl:variable name="var904_resultof_map" as="node()*" select="$var6_resultof_map"/>
																	<xsl:variable name="var905_result" as="xs:string*">
																		<xsl:for-each select="((($var904_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																			<xsl:variable name="var903_current" as="node()" select="."/>
																			<xsl:variable name="var902_resultof_map" as="node()*" select="$var6_resultof_map"/>
																			<xsl:for-each select="((($var902_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																				<xsl:variable name="var896_resultof_map" as="xs:string*">
																					<xsl:for-each select="($var903_current/node())[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:variable name="var900_result" as="xs:string">
																					<xsl:choose>
																						<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var896_resultof_map return xs:string($x), ' ')), '@')">
																							<xsl:variable name="var897_resultof_map" as="xs:string*">
																								<xsl:for-each select="($var903_current/node())[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:variable name="var898_resultof_map" as="xs:string*">
																								<xsl:for-each select="($var903_current/node())[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var897_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var898_resultof_map return xs:string($x), ' ')), '@'))"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:variable name="var899_resultof_map" as="xs:string*">
																								<xsl:for-each select="($var903_current/node())[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="xs:string(fn:string-join(for $x in $var899_resultof_map return xs:string($x), ' '))"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:variable>
																				<xsl:variable name="var901_resultof_map" as="xs:string*">
																					<xsl:for-each select="node()[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="fn:concat(fn:concat($var900_result, ' / '), xs:string(fn:string-join(for $x in $var901_resultof_map return xs:string($x), ' ')))"/>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var905_result return xs:string($x), ' '))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="var910_resultof_map" as="node()*" select="$var6_resultof_map"/>
																	<xsl:variable name="var911_result" as="xs:string*">
																		<xsl:for-each select="((($var910_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																			<xsl:variable name="var906_resultof_map" as="xs:string*">
																				<xsl:for-each select="node()[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var906_resultof_map return xs:string($x), ' ')), '@')">
																					<xsl:variable name="var907_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:variable name="var908_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var907_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var908_resultof_map return xs:string($x), ' ')), '@'))"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:variable name="var909_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="xs:string(fn:string-join(for $x in $var909_resultof_map return xs:string($x), ' '))"/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var911_result return xs:string($x), ' '))"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:variable>
														<xsl:variable name="var913_resultof_map" as="xs:string*">
															<xsl:for-each select="node()[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="fn:concat(fn:concat($var912_result, ' : '), xs:string(fn:string-join(for $x in $var913_resultof_map return xs:string($x), ' ')))"/>
													</xsl:for-each>
												</xsl:if>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var915_result return xs:string($x), ' '))"/>
										</xsl:when>
										<xsl:when test="$var29_resultof_exists">
											<xsl:variable name="var924_resultof_map" as="node()*" select="$var6_resultof_map"/>
											<xsl:variable name="var925_result" as="xs:string*">
												<xsl:for-each select="((($var924_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
													<xsl:variable name="var923_current" as="node()" select="."/>
													<xsl:variable name="var922_resultof_map" as="node()*" select="$var6_resultof_map"/>
													<xsl:for-each select="((($var922_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
														<xsl:variable name="var916_resultof_map" as="xs:string*">
															<xsl:for-each select="($var923_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:variable name="var920_result" as="xs:string">
															<xsl:choose>
																<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var916_resultof_map return xs:string($x), ' ')), '@')">
																	<xsl:variable name="var917_resultof_map" as="xs:string*">
																		<xsl:for-each select="($var923_current/node())[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:variable name="var918_resultof_map" as="xs:string*">
																		<xsl:for-each select="($var923_current/node())[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var917_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var918_resultof_map return xs:string($x), ' ')), '@'))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="var919_resultof_map" as="xs:string*">
																		<xsl:for-each select="($var923_current/node())[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var919_resultof_map return xs:string($x), ' '))"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:variable>
														<xsl:variable name="var921_resultof_map" as="xs:string*">
															<xsl:for-each select="node()[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="fn:concat(fn:concat($var920_result, ' / '), xs:string(fn:string-join(for $x in $var921_resultof_map return xs:string($x), ' ')))"/>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var925_result return xs:string($x), ' '))"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="var930_resultof_map" as="node()*" select="$var6_resultof_map"/>
											<xsl:variable name="var931_result" as="xs:string*">
												<xsl:for-each select="((($var930_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
													<xsl:variable name="var926_resultof_map" as="xs:string*">
														<xsl:for-each select="node()[fn:boolean(self::text())]">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:choose>
														<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var926_resultof_map return xs:string($x), ' ')), '@')">
															<xsl:variable name="var927_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:variable name="var928_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var927_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var928_resultof_map return xs:string($x), ' ')), '@'))"/>
														</xsl:when>
														<xsl:otherwise>
															<xsl:variable name="var929_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="xs:string(fn:string-join(for $x in $var929_resultof_map return xs:string($x), ' '))"/>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var931_result return xs:string($x), ' '))"/>
										</xsl:otherwise>
									</xsl:choose>
								</title>
							</xsl:if>
							<xsl:variable name="var936_resultof_map" as="node()*" select="$var4_resultof_map"/>
							<xsl:for-each select="(($var936_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
								<xsl:variable name="var935_current" as="node()" select="."/>
								<xsl:variable name="var934_resultof_map" as="node()*">
									<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '021N')]">
										<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</datafield>
									</xsl:for-each>
								</xsl:variable>
								<xsl:for-each select="((($var934_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
									<xsl:variable name="var932_result" as="xs:string">
										<xsl:choose>
											<xsl:when test="fn:contains(fn:string($var935_current), '@')">
												<xsl:sequence select="fn:concat(fn:substring-before(fn:string($var935_current), '@'), fn:substring-after(fn:string($var935_current), '@'))"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="fn:string($var935_current)"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:variable name="var933_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<title>
										<xsl:sequence select="fn:concat(fn:concat($var932_result, ' : '), xs:string(fn:string-join(for $x in $var933_resultof_map return xs:string($x), ' ')))"/>
									</title>
								</xsl:for-each>
							</xsl:for-each>
							<xsl:variable name="var960_let" as="node()*">
								<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '028A')]">
									<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
										<xsl:sequence select="(./@node(), ./node())"/>
									</datafield>
								</xsl:for-each>
								<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '028B')]">
									<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
										<xsl:sequence select="(./@node(), ./node())"/>
									</datafield>
								</xsl:for-each>
							</xsl:variable>
							<xsl:for-each select="$var960_let">
								<xsl:call-template name="agt:MapTotei_lite_var959_function">
									<xsl:with-param name="par0" select="." as="node()"/>
								</xsl:call-template>
							</xsl:for-each>
							<xsl:variable name="var973_resultof_map" as="node()*">
								<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '029A')]">
									<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
										<xsl:sequence select="(./@node(), ./node())"/>
									</datafield>
								</xsl:for-each>
							</xsl:variable>
							<xsl:for-each select="$var973_resultof_map">
								<xsl:call-template name="agt:MapTotei_lite_var972_function">
									<xsl:with-param name="par0" select="." as="node()"/>
								</xsl:call-template>
							</xsl:for-each>
							<xsl:variable name="var990_resultof_map" as="node()*">
								<xsl:for-each select="$var1_record">
									<xsl:variable name="var986_datafield" as="node()+" select="ns0:datafield"/>
									<xsl:variable name="var989_resultof_filter" as="node()*">
										<xsl:for-each select="$var986_datafield">
											<xsl:variable name="var987_resultof_map" as="node()*">
												<xsl:for-each select="$var986_datafield[(fn:string(@tag) = '028A')]">
													<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
														<xsl:sequence select="(./@node(), ./node())"/>
													</datafield>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var988_resultof_logical_and" as="xs:boolean" select="((fn:string(@tag) = '029F') and (fn:count($var987_resultof_map) = xs:decimal('0')))"/>
											<xsl:if test="$var988_resultof_logical_and">
												<xsl:sequence select="."/>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:for-each select="$var989_resultof_filter">
										<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</datafield>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:variable>
							<xsl:for-each select="$var990_resultof_map">
								<xsl:call-template name="agt:MapTotei_lite_var985_function">
									<xsl:with-param name="par0" select="." as="node()"/>
								</xsl:call-template>
							</xsl:for-each>
							<editor>
								<xsl:variable name="var992_let" as="node()*" select="$var49_val"/>
								<xsl:for-each select="((($var992_let/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = '0')])[fn:exists(node()[fn:boolean(self::text())])]">
									<xsl:variable name="var991_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<ref>
										<xsl:sequence select="fn:concat('http://d-nb.info/gnd/', fn:substring-after(xs:string(fn:string-join(for $x in $var991_resultof_map return xs:string($x), ' ')), '/'))"/>
									</ref>
								</xsl:for-each>
								<xsl:variable name="var994_let" as="node()*" select="$var49_val"/>
								<xsl:for-each select="((($var994_let/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'h')])[fn:exists(node()[fn:boolean(self::text())])]">
									<date>
										<xsl:attribute name="type" namespace="" select="'Lebensdaten'"/>
										<xsl:variable name="var993_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:sequence select="xs:string(fn:string-join(for $x in $var993_resultof_map return xs:string($x), ' '))"/>
									</date>
								</xsl:for-each>
								<xsl:variable name="var996_let" as="node()*" select="$var49_val"/>
								<xsl:for-each select="((($var996_let/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'D')])[fn:exists(node()[fn:boolean(self::text())])]">
									<date>
										<xsl:attribute name="type" namespace="" select="'Lebensdaten'"/>
										<xsl:variable name="var995_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:sequence select="xs:string(fn:string-join(for $x in $var995_resultof_map return xs:string($x), ' '))"/>
									</date>
								</xsl:for-each>
								<xsl:variable name="var1009_let" as="node()*" select="$var49_val"/>
								<xsl:variable name="var1010_let" as="node()*">
									<xsl:for-each select="$var1009_let">
										<xsl:call-template name="agt:MapTotei_lite_var1008_function">
											<xsl:with-param name="par0" select="." as="node()"/>
										</xsl:call-template>
									</xsl:for-each>
								</xsl:variable>
								<xsl:for-each select="$var1010_let">
									<name>
										<xsl:sequence select="fn:string(.)"/>
									</name>
								</xsl:for-each>
							</editor>
						</bibl>
						<xsl:variable name="var1014_resultof_map" as="node()*">
							<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '033A')]">
								<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
									<xsl:sequence select="(./@node(), ./node())"/>
								</datafield>
							</xsl:for-each>
						</xsl:variable>
						<xsl:for-each select="$var1014_resultof_map">
							<xsl:call-template name="agt:MapTotei_lite_var1013_function">
								<xsl:with-param name="par0" select="." as="node()"/>
							</xsl:call-template>
						</xsl:for-each>
						<xsl:variable name="var1018_resultof_map" as="node()*">
							<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '033J')]">
								<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
									<xsl:sequence select="(./@node(), ./node())"/>
								</datafield>
							</xsl:for-each>
						</xsl:variable>
						<bibl>
							<xsl:for-each select="$var1018_resultof_map">
								<xsl:call-template name="agt:MapTotei_lite_var1017_function">
									<xsl:with-param name="par0" select="." as="node()"/>
								</xsl:call-template>
							</xsl:for-each>
						</bibl>
						<bibl>
							<xsl:variable name="var1022_let" as="node()*" select="$var8_val"/>
							<xsl:variable name="var1023_let" as="node()*">
								<xsl:for-each select="$var1022_let[fn:exists(@code)][(fn:string(@code) = 'a')]">
									<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
										<xsl:sequence select="(./@node(), ./node())"/>
									</subfield>
								</xsl:for-each>
							</xsl:variable>
							<xsl:for-each select="($var1023_let/node())[fn:boolean(self::text())]">
								<xsl:variable name="var1021_current" as="node()" select="."/>
								<xsl:variable name="var1019_let" as="node()*" select="$var8_val"/>
								<xsl:variable name="var1020_let" as="node()*">
									<xsl:for-each select="$var1019_let[fn:exists(@code)][(fn:string(@code) = 'b')]">
										<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</subfield>
									</xsl:for-each>
								</xsl:variable>
								<xsl:for-each select="($var1020_let/node())[fn:boolean(self::text())]">
									<date>
										<xsl:sequence select="fn:concat(fn:concat(fn:string($var1021_current), '-'), fn:string(.))"/>
									</date>
								</xsl:for-each>
							</xsl:for-each>
							<xsl:variable name="var1027_let" as="node()*" select="$var8_val"/>
							<xsl:variable name="var1028_let" as="node()*">
								<xsl:for-each select="$var1027_let[fn:exists(@code)][(fn:string(@code) = 'c')]">
									<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
										<xsl:sequence select="(./@node(), ./node())"/>
									</subfield>
								</xsl:for-each>
							</xsl:variable>
							<xsl:for-each select="($var1028_let/node())[fn:boolean(self::text())]">
								<xsl:variable name="var1026_current" as="node()" select="."/>
								<xsl:variable name="var1024_let" as="node()*" select="$var8_val"/>
								<xsl:variable name="var1025_let" as="node()*">
									<xsl:for-each select="$var1024_let[fn:exists(@code)][(fn:string(@code) = 'd')]">
										<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</subfield>
									</xsl:for-each>
								</xsl:variable>
								<xsl:for-each select="($var1025_let/node())[fn:boolean(self::text())]">
									<date>
										<xsl:sequence select="fn:concat(fn:concat(fn:string($var1026_current), '-'), fn:string(.))"/>
									</date>
								</xsl:for-each>
							</xsl:for-each>
							<xsl:variable name="var1029_resultof_map" as="node()*" select="$var3_resultof_map"/>
							<xsl:variable name="var1030_let" as="node()*">
								<xsl:for-each select="(($var1029_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'n')]">
									<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
										<xsl:sequence select="(./@node(), ./node())"/>
									</subfield>
								</xsl:for-each>
							</xsl:variable>
							<xsl:for-each select="($var1030_let/node())[fn:boolean(self::text())]">
								<date>
									<xsl:sequence select="fn:string(.)"/>
								</date>
							</xsl:for-each>
							<xsl:variable name="var1031_resultof_map" as="node()*" select="$var3_resultof_map"/>
							<xsl:variable name="var1032_let" as="node()*">
								<xsl:for-each select="(($var1031_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')]">
									<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
										<xsl:sequence select="(./@node(), ./node())"/>
									</subfield>
								</xsl:for-each>
							</xsl:variable>
							<xsl:for-each select="($var1032_let/node())[fn:boolean(self::text())]">
								<date>
									<xsl:sequence select="fn:string(.)"/>
								</date>
							</xsl:for-each>
						</bibl>
					</sourceDesc>
				</fileDesc>
				<profileDesc>
					<xsl:variable name="var1033_resultof_map" as="node()*">
						<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '010@')]">
							<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
								<xsl:sequence select="(./@node(), ./node())"/>
							</datafield>
						</xsl:for-each>
					</xsl:variable>
					<xsl:for-each select="$var1033_resultof_map">
						<langUsage>
							<xsl:for-each select="ns0:subfield[fn:exists(@code)][(fn:string(@code) = 'a')]">
								<language>
									<xsl:sequence select="fn:string(.)"/>
								</language>
							</xsl:for-each>
						</langUsage>
					</xsl:for-each>
					<xsl:variable name="var1039_resultof_map" as="node()*">
						<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '044S')]">
							<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
								<xsl:sequence select="(./@node(), ./node())"/>
							</datafield>
						</xsl:for-each>
					</xsl:variable>
					<xsl:variable name="var1040_let" as="node()*">
						<xsl:for-each select="(($var1039_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
							<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
								<xsl:sequence select="(./@node(), ./node())"/>
							</subfield>
						</xsl:for-each>
					</xsl:variable>
					<textClass>
						<keywords>
							<xsl:for-each select="$var1040_let">
								<xsl:variable name="var1038_current" as="node()" select="."/>
								<xsl:variable name="var1037_index" as="xs:integer" select="position()"/>
								<xsl:variable name="var1035_resultof_map" as="node()*">
									<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '044S')]">
										<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</datafield>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="var1036_let" as="node()*">
									<xsl:for-each select="(($var1035_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'g')]">
										<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</subfield>
									</xsl:for-each>
								</xsl:variable>
								<xsl:for-each select="$var1036_let">
									<xsl:if test="(($var1037_index = position()) and fn:exists(($var1038_current/node())[fn:boolean(self::text())]))">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:variable name="var1034_resultof_map" as="xs:string*">
												<xsl:for-each select="($var1038_current/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<term>
												<xsl:sequence select="fn:concat(fn:concat(fn:concat(xs:string(fn:string-join(for $x in $var1034_resultof_map return xs:string($x), ' ')), ' ['), fn:string(.)), ']')"/>
											</term>
										</xsl:for-each>
									</xsl:if>
								</xsl:for-each>
							</xsl:for-each>
						</keywords>
					</textClass>
				</profileDesc>
			</teiHeader>
		</TEI>
	</xsl:template>
</xsl:stylesheet>
