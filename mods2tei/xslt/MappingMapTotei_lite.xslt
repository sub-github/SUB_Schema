<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2014r2

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns0="http://www.loc.gov/mods/v3" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" exclude-result-prefixes="ns0 xs fn">
	<xsl:output method="xml" encoding="UTF-8" byte-order-mark="no" indent="yes"/>
	<xsl:template match="/">
		<xsl:variable name="var1_mods" as="node()?" select="ns0:mods"/>
		<xsl:variable name="var2_resultof_map" as="xs:boolean?">
			<xsl:for-each select="$var1_mods">
				<xsl:sequence select="fn:exists(ns0:titleInfo[fn:exists(ns0:nonSort)])"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var3_resultof_any" as="xs:boolean" select="fn:exists($var1_mods[fn:exists(ns0:titleInfo[fn:exists(ns0:nonSort)])])"/>
		<xsl:variable name="var4_resultof_any" as="xs:boolean" select="fn:exists($var1_mods[fn:exists(ns0:titleInfo[fn:exists(ns0:subTitle)])])"/>
		<xsl:variable name="var5_resultof_map" as="node()*">
			<xsl:for-each select="($var1_mods/ns0:originInfo)[fn:exists(ns0:edition[(fn:string(.) = '[Electronic ed.]')])]">
				<originInfo xmlns="http://www.loc.gov/mods/v3" xmlns:xlink="http://www.w3.org/1999/xlink">
					<xsl:sequence select="@node()"/>
					<xsl:sequence select="node()"/>
				</originInfo>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var6_resultof_map" as="node()*">
			<xsl:for-each select="($var1_mods/ns0:originInfo)[fn:exists(ns0:edition[(fn:string(.) != '[Electronic ed.]')])]">
				<originInfo xmlns="http://www.loc.gov/mods/v3" xmlns:xlink="http://www.w3.org/1999/xlink">
					<xsl:sequence select="@node()"/>
					<xsl:sequence select="node()"/>
				</originInfo>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var7_resultof_map" as="xs:boolean?">
			<xsl:for-each select="$var1_mods">
				<xsl:sequence select="fn:exists(ns0:subject[fn:exists(ns0:titleInfo[fn:exists(ns0:nonSort)])])"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var8_resultof_any" as="xs:boolean" select="fn:exists($var1_mods[fn:exists(ns0:subject[fn:exists(ns0:titleInfo[fn:exists(ns0:subTitle)])])])"/>
		<xsl:variable name="var9_resultof_map" as="node()*">
			<xsl:for-each select="$var1_mods/ns0:subject/ns0:topic">
				<item xmlns="http://www.tei-c.org/ns/1.0">
					<xsl:sequence select="fn:string(.)"/>
				</item>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var10_resultof_any" as="xs:boolean" select="fn:exists($var1_mods[fn:exists(ns0:subject[fn:exists(ns0:titleInfo[fn:exists(ns0:nonSort)])])])"/>
		<xsl:variable name="var18_val" as="xs:string?">
			<xsl:choose>
				<xsl:when test="$var3_resultof_any">
					<xsl:variable name="var13_resultof_filter" as="node()*">
						<xsl:for-each select="$var1_mods">
							<xsl:variable name="var12_resultof_filter" as="node()*">
								<xsl:for-each select="ns0:titleInfo">
									<xsl:variable name="var11_current" as="node()" select="."/>
									<xsl:if test="fn:exists(ns0:nonSort[fn:exists($var11_current/ns0:title)])">
										<xsl:sequence select="."/>
									</xsl:if>
								</xsl:for-each>
							</xsl:variable>
							<xsl:if test="fn:exists($var12_resultof_filter)">
								<xsl:sequence select="."/>
							</xsl:if>
						</xsl:for-each>
					</xsl:variable>
					<xsl:if test="fn:exists($var13_resultof_filter)">
						<xsl:variable name="var16_resultof_map" as="xs:string*">
							<xsl:for-each select="$var1_mods/ns0:titleInfo">
								<xsl:variable name="var15_current" as="node()" select="."/>
								<xsl:for-each select="ns0:nonSort">
									<xsl:variable name="var14_current" as="node()" select="."/>
									<xsl:for-each select="$var15_current/ns0:title">
										<xsl:sequence select="fn:concat(fn:concat(fn:string($var14_current), ' '), fn:string(.))"/>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:variable>
						<xsl:sequence select="xs:string(fn:string-join(for $x in $var16_resultof_map return xs:string($x), ' '))"/>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:exists($var1_mods[fn:exists(ns0:titleInfo[fn:exists(ns0:title)])])">
						<xsl:variable name="var17_resultof_map" as="xs:string*">
							<xsl:for-each select="$var1_mods/ns0:titleInfo/ns0:title">
								<xsl:sequence select="fn:string(.)"/>
							</xsl:for-each>
						</xsl:variable>
						<xsl:sequence select="xs:string(fn:string-join(for $x in $var17_resultof_map return xs:string($x), ' '))"/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="var19_resultof_exists" as="xs:boolean" select="fn:exists($var18_val)"/>
		<xsl:variable name="var28_val" as="xs:string?">
			<xsl:choose>
				<xsl:when test="$var10_resultof_any">
					<xsl:variable name="var23_resultof_filter" as="node()*">
						<xsl:for-each select="$var1_mods">
							<xsl:variable name="var22_resultof_filter" as="node()*">
								<xsl:for-each select="ns0:subject">
									<xsl:variable name="var21_resultof_filter" as="node()*">
										<xsl:for-each select="ns0:titleInfo">
											<xsl:variable name="var20_current" as="node()" select="."/>
											<xsl:if test="fn:exists(ns0:nonSort[fn:exists($var20_current/ns0:title)])">
												<xsl:sequence select="."/>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:if test="fn:exists($var21_resultof_filter)">
										<xsl:sequence select="."/>
									</xsl:if>
								</xsl:for-each>
							</xsl:variable>
							<xsl:if test="fn:exists($var22_resultof_filter)">
								<xsl:sequence select="."/>
							</xsl:if>
						</xsl:for-each>
					</xsl:variable>
					<xsl:if test="fn:exists($var23_resultof_filter)">
						<xsl:variable name="var26_resultof_map" as="xs:string*">
							<xsl:for-each select="$var1_mods/ns0:subject/ns0:titleInfo">
								<xsl:variable name="var25_current" as="node()" select="."/>
								<xsl:for-each select="ns0:nonSort">
									<xsl:variable name="var24_current" as="node()" select="."/>
									<xsl:for-each select="$var25_current/ns0:title">
										<xsl:sequence select="fn:concat(fn:concat(fn:string($var24_current), ' '), fn:string(.))"/>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:variable>
						<xsl:sequence select="xs:string(fn:string-join(for $x in $var26_resultof_map return xs:string($x), ' '))"/>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:exists($var1_mods[fn:exists(ns0:subject[fn:exists(ns0:titleInfo[fn:exists(ns0:title)])])])">
						<xsl:variable name="var27_resultof_map" as="xs:string*">
							<xsl:for-each select="$var1_mods/ns0:subject/ns0:titleInfo/ns0:title">
								<xsl:sequence select="fn:string(.)"/>
							</xsl:for-each>
						</xsl:variable>
						<xsl:sequence select="xs:string(fn:string-join(for $x in $var27_resultof_map return xs:string($x), ' '))"/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="var29_resultof_exists" as="xs:boolean" select="fn:exists($var28_val)"/>
		<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:dcr="http://www.isocat.org/ns/dcr">
			<xsl:attribute name="xsi:schemaLocation" namespace="http://www.w3.org/2001/XMLSchema-instance" select="'http://www.tei-c.org/ns/1.0 //psf/Home/Documents/projects/konzepte/Sub-Schema/my/mods2tei/tei_lite.xsd'"/>
			<teiHeader>
				<fileDesc>
					<xsl:for-each select="$var1_mods/ns0:physicalDescription/ns0:extent">
						<extent>
							<xsl:sequence select="fn:string(.)"/>
						</extent>
					</xsl:for-each>
					<publicationStmt>
						<xsl:variable name="var30_resultof_map" as="node()*" select="$var5_resultof_map"/>
						<xsl:for-each select="$var30_resultof_map/ns0:publisher">
							<publisher>
								<xsl:sequence select="fn:string(.)"/>
							</publisher>
						</xsl:for-each>
						<xsl:variable name="var31_resultof_map" as="node()*" select="$var5_resultof_map"/>
						<xsl:for-each select="$var31_resultof_map/ns0:dateCaptured">
							<date>
								<xsl:attribute name="type" namespace="" select="fn:node-name(.)"/>
								<xsl:sequence select="fn:string(.)"/>
							</date>
						</xsl:for-each>
						<xsl:variable name="var32_resultof_map" as="node()*" select="$var5_resultof_map"/>
						<xsl:for-each select="$var32_resultof_map/ns0:place/ns0:placeTerm">
							<pubPlace>
								<xsl:sequence select="fn:string(.)"/>
							</pubPlace>
						</xsl:for-each>
					</publicationStmt>
					<sourceDesc>
						<bibl>
							<xsl:variable name="var43_result" as="xs:string?">
								<xsl:choose>
									<xsl:when test="$var4_resultof_any">
										<xsl:if test="($var19_resultof_exists and fn:exists($var1_mods[fn:exists(ns0:titleInfo[fn:exists(ns0:subTitle)])]))">
											<xsl:variable name="var38_result" as="xs:string*">
												<xsl:if test="$var19_resultof_exists">
													<xsl:for-each select="$var1_mods/ns0:titleInfo/ns0:subTitle">
														<xsl:variable name="var37_result" as="xs:string">
															<xsl:choose>
																<xsl:when test="$var3_resultof_any">
																	<xsl:variable name="var35_resultof_map" as="xs:string*">
																		<xsl:for-each select="$var1_mods/ns0:titleInfo">
																			<xsl:variable name="var34_current" as="node()" select="."/>
																			<xsl:for-each select="ns0:nonSort">
																				<xsl:variable name="var33_current" as="node()" select="."/>
																				<xsl:for-each select="$var34_current/ns0:title">
																					<xsl:sequence select="fn:concat(fn:concat(fn:string($var33_current), ' '), fn:string(.))"/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var35_resultof_map return xs:string($x), ' '))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="var36_resultof_map" as="xs:string*">
																		<xsl:for-each select="$var1_mods/ns0:titleInfo/ns0:title">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var36_resultof_map return xs:string($x), ' '))"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:variable>
														<xsl:sequence select="fn:concat(fn:concat($var37_result, ' : '), fn:string(.))"/>
													</xsl:for-each>
												</xsl:if>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var38_result return xs:string($x), ' '))"/>
										</xsl:if>
									</xsl:when>
									<xsl:otherwise>
										<xsl:if test="$var19_resultof_exists">
											<xsl:choose>
												<xsl:when test="$var3_resultof_any">
													<xsl:variable name="var41_resultof_map" as="xs:string*">
														<xsl:for-each select="$var1_mods/ns0:titleInfo">
															<xsl:variable name="var40_current" as="node()" select="."/>
															<xsl:for-each select="ns0:nonSort">
																<xsl:variable name="var39_current" as="node()" select="."/>
																<xsl:for-each select="$var40_current/ns0:title">
																	<xsl:sequence select="fn:concat(fn:concat(fn:string($var39_current), ' '), fn:string(.))"/>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var41_resultof_map return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="var42_resultof_map" as="xs:string*">
														<xsl:for-each select="$var1_mods/ns0:titleInfo/ns0:title">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var42_resultof_map return xs:string($x), ' '))"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:if>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:if test="fn:exists($var43_result)">
								<title>
									<xsl:choose>
										<xsl:when test="$var4_resultof_any">
											<xsl:variable name="var49_result" as="xs:string*">
												<xsl:if test="$var19_resultof_exists">
													<xsl:for-each select="$var1_mods/ns0:titleInfo/ns0:subTitle">
														<xsl:variable name="var48_result" as="xs:string">
															<xsl:choose>
																<xsl:when test="$var3_resultof_any">
																	<xsl:variable name="var46_resultof_map" as="xs:string*">
																		<xsl:for-each select="$var1_mods/ns0:titleInfo">
																			<xsl:variable name="var45_current" as="node()" select="."/>
																			<xsl:for-each select="ns0:nonSort">
																				<xsl:variable name="var44_current" as="node()" select="."/>
																				<xsl:for-each select="$var45_current/ns0:title">
																					<xsl:sequence select="fn:concat(fn:concat(fn:string($var44_current), ' '), fn:string(.))"/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var46_resultof_map return xs:string($x), ' '))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="var47_resultof_map" as="xs:string*">
																		<xsl:for-each select="$var1_mods/ns0:titleInfo/ns0:title">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var47_resultof_map return xs:string($x), ' '))"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:variable>
														<xsl:sequence select="fn:concat(fn:concat($var48_result, ' : '), fn:string(.))"/>
													</xsl:for-each>
												</xsl:if>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var49_result return xs:string($x), ' '))"/>
										</xsl:when>
										<xsl:when test="$var3_resultof_any">
											<xsl:variable name="var52_resultof_map" as="xs:string*">
												<xsl:for-each select="$var1_mods/ns0:titleInfo">
													<xsl:variable name="var51_current" as="node()" select="."/>
													<xsl:for-each select="ns0:nonSort">
														<xsl:variable name="var50_current" as="node()" select="."/>
														<xsl:for-each select="$var51_current/ns0:title">
															<xsl:sequence select="fn:concat(fn:concat(fn:string($var50_current), ' '), fn:string(.))"/>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var52_resultof_map return xs:string($x), ' '))"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="var53_resultof_map" as="xs:string*">
												<xsl:for-each select="$var1_mods/ns0:titleInfo/ns0:title">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var53_resultof_map return xs:string($x), ' '))"/>
										</xsl:otherwise>
									</xsl:choose>
								</title>
							</xsl:if>
							<xsl:variable name="var54_resultof_map" as="node()*" select="$var6_resultof_map"/>
							<xsl:for-each select="$var54_resultof_map/ns0:dateIssued">
								<date>
									<xsl:attribute name="type" namespace="" select="fn:node-name(.)"/>
									<xsl:sequence select="fn:string(.)"/>
								</date>
							</xsl:for-each>
							<xsl:variable name="var55_resultof_map" as="node()*" select="$var6_resultof_map"/>
							<xsl:for-each select="$var55_resultof_map/ns0:dateCreated">
								<date>
									<xsl:attribute name="type" namespace="" select="fn:node-name(.)"/>
									<xsl:sequence select="fn:string(.)"/>
								</date>
							</xsl:for-each>
							<xsl:variable name="var56_resultof_map" as="node()*" select="$var6_resultof_map"/>
							<xsl:for-each select="$var56_resultof_map/ns0:dateOther">
								<date>
									<xsl:if test="fn:exists(@type)">
										<xsl:attribute name="type" namespace="" select="fn:string(@type)"/>
									</xsl:if>
									<xsl:sequence select="fn:string(.)"/>
								</date>
							</xsl:for-each>
							<xsl:variable name="var61_resultof_map" as="node()*">
								<xsl:for-each select="($var1_mods/ns0:name)[fn:exists(ns0:role[fn:exists(ns0:roleTerm[(fn:string(.) = 'aut')])])]">
									<name xmlns="http://www.loc.gov/mods/v3" xmlns:xlink="http://www.w3.org/1999/xlink">
										<xsl:sequence select="@node()"/>
										<xsl:sequence select="node()"/>
									</name>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var62_let" as="node()*">
								<xsl:for-each select="(($var61_resultof_map/ns0:namePart)[fn:exists(@type)])[(fn:string(@type) = 'family')]">
									<namePart xmlns="http://www.loc.gov/mods/v3" xmlns:xlink="http://www.w3.org/1999/xlink">
										<xsl:sequence select="@node()"/>
										<xsl:sequence select="node()"/>
									</namePart>
								</xsl:for-each>
							</xsl:variable>
							<author>
								<xsl:for-each select="$var62_let">
									<xsl:variable name="var60_current" as="node()" select="."/>
									<xsl:variable name="var59_index" as="xs:integer" select="position()"/>
									<xsl:variable name="var57_resultof_map" as="node()*">
										<xsl:for-each select="($var1_mods/ns0:name)[fn:exists(ns0:role[fn:exists(ns0:roleTerm[(fn:string(.) = 'aut')])])]">
											<name xmlns="http://www.loc.gov/mods/v3" xmlns:xlink="http://www.w3.org/1999/xlink">
												<xsl:sequence select="@node()"/>
												<xsl:sequence select="node()"/>
											</name>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="var58_let" as="node()*">
										<xsl:for-each select="(($var57_resultof_map/ns0:namePart)[fn:exists(@type)])[(fn:string(@type) = 'given')]">
											<namePart xmlns="http://www.loc.gov/mods/v3" xmlns:xlink="http://www.w3.org/1999/xlink">
												<xsl:sequence select="@node()"/>
												<xsl:sequence select="node()"/>
											</namePart>
										</xsl:for-each>
									</xsl:variable>
									<xsl:for-each select="$var58_let">
										<xsl:if test="($var59_index = position())">
											<name>
												<xsl:sequence select="fn:concat(fn:concat(fn:string($var60_current), ', '), fn:string(.))"/>
											</name>
										</xsl:if>
									</xsl:for-each>
								</xsl:for-each>
							</author>
							<xsl:variable name="var67_resultof_map" as="node()*">
								<xsl:for-each select="($var1_mods/ns0:name)[fn:exists(ns0:role[fn:exists(ns0:roleTerm[(fn:string(.) = 'edt')])])]">
									<name xmlns="http://www.loc.gov/mods/v3" xmlns:xlink="http://www.w3.org/1999/xlink">
										<xsl:sequence select="@node()"/>
										<xsl:sequence select="node()"/>
									</name>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var68_let" as="node()*">
								<xsl:for-each select="(($var67_resultof_map/ns0:namePart)[fn:exists(@type)])[(fn:string(@type) = 'family')]">
									<namePart xmlns="http://www.loc.gov/mods/v3" xmlns:xlink="http://www.w3.org/1999/xlink">
										<xsl:sequence select="@node()"/>
										<xsl:sequence select="node()"/>
									</namePart>
								</xsl:for-each>
							</xsl:variable>
							<editor>
								<xsl:for-each select="$var68_let">
									<xsl:variable name="var66_current" as="node()" select="."/>
									<xsl:variable name="var65_index" as="xs:integer" select="position()"/>
									<xsl:variable name="var63_resultof_map" as="node()*">
										<xsl:for-each select="($var1_mods/ns0:name)[fn:exists(ns0:role[fn:exists(ns0:roleTerm[(fn:string(.) = 'edt')])])]">
											<name xmlns="http://www.loc.gov/mods/v3" xmlns:xlink="http://www.w3.org/1999/xlink">
												<xsl:sequence select="@node()"/>
												<xsl:sequence select="node()"/>
											</name>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="var64_let" as="node()*">
										<xsl:for-each select="(($var63_resultof_map/ns0:namePart)[fn:exists(@type)])[(fn:string(@type) = 'given')]">
											<namePart xmlns="http://www.loc.gov/mods/v3" xmlns:xlink="http://www.w3.org/1999/xlink">
												<xsl:sequence select="@node()"/>
												<xsl:sequence select="node()"/>
											</namePart>
										</xsl:for-each>
									</xsl:variable>
									<xsl:for-each select="$var64_let">
										<xsl:if test="($var65_index = position())">
											<name>
												<xsl:sequence select="fn:concat(fn:concat(fn:string($var66_current), ', '), fn:string(.))"/>
											</name>
										</xsl:if>
									</xsl:for-each>
								</xsl:for-each>
							</editor>
							<xsl:variable name="var69_resultof_map" as="node()*" select="$var6_resultof_map"/>
							<xsl:for-each select="$var69_resultof_map/ns0:publisher">
								<publisher>
									<xsl:sequence select="fn:string(.)"/>
								</publisher>
							</xsl:for-each>
							<xsl:variable name="var70_resultof_map" as="node()*" select="$var6_resultof_map"/>
							<xsl:for-each select="$var70_resultof_map/ns0:place/ns0:placeTerm">
								<pubPlace>
									<xsl:sequence select="fn:string(.)"/>
								</pubPlace>
							</xsl:for-each>
						</bibl>
					</sourceDesc>
				</fileDesc>
				<profileDesc>
					<langUsage>
						<xsl:for-each select="$var1_mods/ns0:language/ns0:languageTerm">
							<language>
								<xsl:sequence select="fn:string(.)"/>
							</language>
						</xsl:for-each>
					</langUsage>
					<textClass>
						<xsl:for-each select="$var1_mods/ns0:classification">
							<classCode>
								<xsl:sequence select="fn:string(.)"/>
							</classCode>
						</xsl:for-each>
						<keywords>
							<xsl:for-each select="$var1_mods/ns0:genre">
								<term>
									<xsl:sequence select="fn:string(.)"/>
								</term>
							</xsl:for-each>
							<list>
								<xsl:sequence select="$var9_resultof_map"/>
								<xsl:sequence select="$var9_resultof_map"/>
								<xsl:for-each select="$var1_mods/ns0:subject/ns0:temporal">
									<item>
										<xsl:sequence select="fn:string(.)"/>
									</item>
								</xsl:for-each>
								<xsl:variable name="var81_result" as="xs:string?">
									<xsl:choose>
										<xsl:when test="$var8_resultof_any">
											<xsl:if test="($var29_resultof_exists and fn:exists($var1_mods[fn:exists(ns0:subject[fn:exists(ns0:titleInfo[fn:exists(ns0:subTitle)])])]))">
												<xsl:variable name="var76_result" as="xs:string*">
													<xsl:if test="$var29_resultof_exists">
														<xsl:for-each select="$var1_mods/ns0:subject/ns0:titleInfo/ns0:subTitle">
															<xsl:variable name="var75_result" as="xs:string">
																<xsl:choose>
																	<xsl:when test="$var10_resultof_any">
																		<xsl:variable name="var73_resultof_map" as="xs:string*">
																			<xsl:for-each select="$var1_mods/ns0:subject/ns0:titleInfo">
																				<xsl:variable name="var72_current" as="node()" select="."/>
																				<xsl:for-each select="ns0:nonSort">
																					<xsl:variable name="var71_current" as="node()" select="."/>
																					<xsl:for-each select="$var72_current/ns0:title">
																						<xsl:sequence select="fn:concat(fn:concat(fn:string($var71_current), ' '), fn:string(.))"/>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var73_resultof_map return xs:string($x), ' '))"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:variable name="var74_resultof_map" as="xs:string*">
																			<xsl:for-each select="$var1_mods/ns0:subject/ns0:titleInfo/ns0:title">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var74_resultof_map return xs:string($x), ' '))"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:variable>
															<xsl:sequence select="fn:concat(fn:concat($var75_result, ' : '), fn:string(.))"/>
														</xsl:for-each>
													</xsl:if>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var76_result return xs:string($x), ' '))"/>
											</xsl:if>
										</xsl:when>
										<xsl:otherwise>
											<xsl:if test="$var29_resultof_exists">
												<xsl:choose>
													<xsl:when test="$var10_resultof_any">
														<xsl:variable name="var79_resultof_map" as="xs:string*">
															<xsl:for-each select="$var1_mods/ns0:subject/ns0:titleInfo">
																<xsl:variable name="var78_current" as="node()" select="."/>
																<xsl:for-each select="ns0:nonSort">
																	<xsl:variable name="var77_current" as="node()" select="."/>
																	<xsl:for-each select="$var78_current/ns0:title">
																		<xsl:sequence select="fn:concat(fn:concat(fn:string($var77_current), ' '), fn:string(.))"/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var79_resultof_map return xs:string($x), ' '))"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:variable name="var80_resultof_map" as="xs:string*">
															<xsl:for-each select="$var1_mods/ns0:subject/ns0:titleInfo/ns0:title">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var80_resultof_map return xs:string($x), ' '))"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:if>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:if test="fn:exists($var81_result)">
									<item>
										<xsl:choose>
											<xsl:when test="$var8_resultof_any">
												<xsl:variable name="var87_result" as="xs:string*">
													<xsl:if test="$var29_resultof_exists">
														<xsl:for-each select="$var1_mods/ns0:subject/ns0:titleInfo/ns0:subTitle">
															<xsl:variable name="var86_result" as="xs:string">
																<xsl:choose>
																	<xsl:when test="$var10_resultof_any">
																		<xsl:variable name="var84_resultof_map" as="xs:string*">
																			<xsl:for-each select="$var1_mods/ns0:subject/ns0:titleInfo">
																				<xsl:variable name="var83_current" as="node()" select="."/>
																				<xsl:for-each select="ns0:nonSort">
																					<xsl:variable name="var82_current" as="node()" select="."/>
																					<xsl:for-each select="$var83_current/ns0:title">
																						<xsl:sequence select="fn:concat(fn:concat(fn:string($var82_current), ' '), fn:string(.))"/>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var84_resultof_map return xs:string($x), ' '))"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:variable name="var85_resultof_map" as="xs:string*">
																			<xsl:for-each select="$var1_mods/ns0:subject/ns0:titleInfo/ns0:title">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var85_resultof_map return xs:string($x), ' '))"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:variable>
															<xsl:sequence select="fn:concat(fn:concat($var86_result, ' : '), fn:string(.))"/>
														</xsl:for-each>
													</xsl:if>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var87_result return xs:string($x), ' '))"/>
											</xsl:when>
											<xsl:when test="$var10_resultof_any">
												<xsl:variable name="var90_resultof_map" as="xs:string*">
													<xsl:for-each select="$var1_mods/ns0:subject/ns0:titleInfo">
														<xsl:variable name="var89_current" as="node()" select="."/>
														<xsl:for-each select="ns0:nonSort">
															<xsl:variable name="var88_current" as="node()" select="."/>
															<xsl:for-each select="$var89_current/ns0:title">
																<xsl:sequence select="fn:concat(fn:concat(fn:string($var88_current), ' '), fn:string(.))"/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var90_resultof_map return xs:string($x), ' '))"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:variable name="var91_resultof_map" as="xs:string*">
													<xsl:for-each select="$var1_mods/ns0:subject/ns0:titleInfo/ns0:title">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var91_resultof_map return xs:string($x), ' '))"/>
											</xsl:otherwise>
										</xsl:choose>
									</item>
								</xsl:if>
								<item>
									<xsl:variable name="var96_resultof_map" as="node()*">
										<xsl:for-each select="($var1_mods/ns0:subject/ns0:name)[fn:exists(ns0:role[fn:exists(ns0:roleTerm[(fn:string(.) = 'aut')])])]">
											<name xmlns="http://www.loc.gov/mods/v3" xmlns:xlink="http://www.w3.org/1999/xlink">
												<xsl:sequence select="@node()"/>
												<xsl:sequence select="node()"/>
											</name>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="var97_let" as="node()*">
										<xsl:for-each select="(($var96_resultof_map/ns0:namePart)[fn:exists(@type)])[(fn:string(@type) = 'family')]">
											<namePart xmlns="http://www.loc.gov/mods/v3" xmlns:xlink="http://www.w3.org/1999/xlink">
												<xsl:sequence select="@node()"/>
												<xsl:sequence select="node()"/>
											</namePart>
										</xsl:for-each>
									</xsl:variable>
									<bibl>
										<author>
											<xsl:for-each select="$var97_let">
												<xsl:variable name="var95_current" as="node()" select="."/>
												<xsl:variable name="var94_index" as="xs:integer" select="position()"/>
												<xsl:variable name="var92_resultof_map" as="node()*">
													<xsl:for-each select="($var1_mods/ns0:subject/ns0:name)[fn:exists(ns0:role[fn:exists(ns0:roleTerm[(fn:string(.) = 'aut')])])]">
														<name xmlns="http://www.loc.gov/mods/v3" xmlns:xlink="http://www.w3.org/1999/xlink">
															<xsl:sequence select="@node()"/>
															<xsl:sequence select="node()"/>
														</name>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="var93_let" as="node()*">
													<xsl:for-each select="(($var92_resultof_map/ns0:namePart)[fn:exists(@type)])[(fn:string(@type) = 'given')]">
														<namePart xmlns="http://www.loc.gov/mods/v3" xmlns:xlink="http://www.w3.org/1999/xlink">
															<xsl:sequence select="@node()"/>
															<xsl:sequence select="node()"/>
														</namePart>
													</xsl:for-each>
												</xsl:variable>
												<xsl:for-each select="$var93_let">
													<xsl:if test="($var94_index = position())">
														<name>
															<xsl:sequence select="fn:concat(fn:concat(fn:string($var95_current), ', '), fn:string(.))"/>
														</name>
													</xsl:if>
												</xsl:for-each>
											</xsl:for-each>
										</author>
									</bibl>
									<xsl:variable name="var102_resultof_map" as="node()*">
										<xsl:for-each select="($var1_mods/ns0:subject/ns0:name)[fn:exists(ns0:role[fn:exists(ns0:roleTerm[(fn:string(.) = 'edt')])])]">
											<name xmlns="http://www.loc.gov/mods/v3" xmlns:xlink="http://www.w3.org/1999/xlink">
												<xsl:sequence select="@node()"/>
												<xsl:sequence select="node()"/>
											</name>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="var103_let" as="node()*">
										<xsl:for-each select="(($var102_resultof_map/ns0:namePart)[fn:exists(@type)])[(fn:string(@type) = 'family')]">
											<namePart xmlns="http://www.loc.gov/mods/v3" xmlns:xlink="http://www.w3.org/1999/xlink">
												<xsl:sequence select="@node()"/>
												<xsl:sequence select="node()"/>
											</namePart>
										</xsl:for-each>
									</xsl:variable>
									<bibl>
										<editor>
											<xsl:for-each select="$var103_let">
												<xsl:variable name="var101_current" as="node()" select="."/>
												<xsl:variable name="var100_index" as="xs:integer" select="position()"/>
												<xsl:variable name="var98_resultof_map" as="node()*">
													<xsl:for-each select="($var1_mods/ns0:subject/ns0:name)[fn:exists(ns0:role[fn:exists(ns0:roleTerm[(fn:string(.) = 'edt')])])]">
														<name xmlns="http://www.loc.gov/mods/v3" xmlns:xlink="http://www.w3.org/1999/xlink">
															<xsl:sequence select="@node()"/>
															<xsl:sequence select="node()"/>
														</name>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="var99_let" as="node()*">
													<xsl:for-each select="(($var98_resultof_map/ns0:namePart)[fn:exists(@type)])[(fn:string(@type) = 'given')]">
														<namePart xmlns="http://www.loc.gov/mods/v3" xmlns:xlink="http://www.w3.org/1999/xlink">
															<xsl:sequence select="@node()"/>
															<xsl:sequence select="node()"/>
														</namePart>
													</xsl:for-each>
												</xsl:variable>
												<xsl:for-each select="$var99_let">
													<xsl:if test="($var100_index = position())">
														<name>
															<xsl:sequence select="fn:concat(fn:concat(fn:string($var101_current), ', '), fn:string(.))"/>
														</name>
													</xsl:if>
												</xsl:for-each>
											</xsl:for-each>
										</editor>
									</bibl>
								</item>
							</list>
						</keywords>
					</textClass>
				</profileDesc>
			</teiHeader>
		</TEI>
	</xsl:template>
</xsl:stylesheet>
